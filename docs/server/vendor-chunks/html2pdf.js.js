"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/html2pdf.js";
exports.ids = ["vendor-chunks/html2pdf.js"];
exports.modules = {

/***/ "(ssr)/./node_modules/html2pdf.js/dist/html2pdf.js":
/*!***************************************************!*\
  !*** ./node_modules/html2pdf.js/dist/html2pdf.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n/*!\n * html2pdf.js v0.10.3\n * Copyright (c) 2025 Erik Koopmans\n * Released under the MIT License.\n */ (function webpackUniversalModuleDefinition(root, factory) {\n    if (true) module.exports = factory(__webpack_require__(/*! jspdf */ \"(ssr)/./node_modules/jspdf/dist/jspdf.es.min.js\"), __webpack_require__(/*! html2canvas */ \"(ssr)/./node_modules/html2canvas/dist/html2canvas.esm.js\"));\n    else {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE_jspdf__, __WEBPACK_EXTERNAL_MODULE_html2canvas__) {\n    return /******/ function() {\n        /******/ var __webpack_modules__ = {\n            /***/ \"./src/plugin/hyperlinks.js\": /*!**********************************!*\\\n  !*** ./src/plugin/hyperlinks.js ***!\n  \\**********************************/ /***/ function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_1035__) {\n                \"use strict\";\n                __nested_webpack_require_1035__.r(__nested_webpack_exports__);\n                /* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_1035__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n                /* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_1035__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_0__);\n                /* harmony import */ var core_js_modules_es_string_link_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_1035__(/*! core-js/modules/es.string.link.js */ \"./node_modules/core-js/modules/es.string.link.js\");\n                /* harmony import */ var core_js_modules_es_string_link_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __nested_webpack_require_1035__.n(core_js_modules_es_string_link_js__WEBPACK_IMPORTED_MODULE_1__);\n                /* harmony import */ var _worker_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_1035__(/*! ../worker.js */ \"./src/worker.js\");\n                /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_1035__(/*! ../utils.js */ \"./src/utils.js\");\n                // Add hyperlink functionality to the PDF creation.\n                // Main link array, and refs to original functions.\n                var linkInfo = [];\n                var orig = {\n                    toContainer: _worker_js__WEBPACK_IMPORTED_MODULE_2__.default.prototype.toContainer,\n                    toPdf: _worker_js__WEBPACK_IMPORTED_MODULE_2__.default.prototype.toPdf\n                };\n                _worker_js__WEBPACK_IMPORTED_MODULE_2__.default.prototype.toContainer = function toContainer() {\n                    return orig.toContainer.call(this).then(function toContainer_hyperlink() {\n                        // Retrieve hyperlink info if the option is enabled.\n                        if (this.opt.enableLinks) {\n                            // Find all anchor tags and get the container's bounds for reference.\n                            var container = this.prop.container;\n                            var links = container.querySelectorAll(\"a\");\n                            var containerRect = (0, _utils_js__WEBPACK_IMPORTED_MODULE_3__.unitConvert)(container.getBoundingClientRect(), this.prop.pageSize.k);\n                            linkInfo = []; // Loop through each anchor tag.\n                            Array.prototype.forEach.call(links, function(link) {\n                                // Treat each client rect as a separate link (for text-wrapping).\n                                var clientRects = link.getClientRects();\n                                for(var i = 0; i < clientRects.length; i++){\n                                    var clientRect = (0, _utils_js__WEBPACK_IMPORTED_MODULE_3__.unitConvert)(clientRects[i], this.prop.pageSize.k);\n                                    clientRect.left -= containerRect.left;\n                                    clientRect.top -= containerRect.top;\n                                    var page = Math.floor(clientRect.top / this.prop.pageSize.inner.height) + 1;\n                                    var top = this.opt.margin[0] + clientRect.top % this.prop.pageSize.inner.height;\n                                    var left = this.opt.margin[1] + clientRect.left;\n                                    linkInfo.push({\n                                        page: page,\n                                        top: top,\n                                        left: left,\n                                        clientRect: clientRect,\n                                        link: link\n                                    });\n                                }\n                            }, this);\n                        }\n                    });\n                };\n                _worker_js__WEBPACK_IMPORTED_MODULE_2__.default.prototype.toPdf = function toPdf() {\n                    return orig.toPdf.call(this).then(function toPdf_hyperlink() {\n                        // Add hyperlinks if the option is enabled.\n                        if (this.opt.enableLinks) {\n                            // Attach each anchor tag based on info from toContainer().\n                            linkInfo.forEach(function(l) {\n                                this.prop.pdf.setPage(l.page);\n                                this.prop.pdf.link(l.left, l.top, l.clientRect.width, l.clientRect.height, {\n                                    url: l.link.href\n                                });\n                            }, this); // Reset the active page of the PDF to the final page.\n                            var nPages = this.prop.pdf.internal.getNumberOfPages();\n                            this.prop.pdf.setPage(nPages);\n                        }\n                    });\n                };\n            /***/ },\n            /***/ \"./src/plugin/jspdf-plugin.js\": /*!************************************!*\\\n  !*** ./src/plugin/jspdf-plugin.js ***!\n  \\************************************/ /***/ function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_6312__) {\n                \"use strict\";\n                __nested_webpack_require_6312__.r(__nested_webpack_exports__);\n                /* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_6312__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n                /* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_0__);\n                /* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_6312__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n                /* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_1__);\n                /* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_6312__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n                /* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_2__);\n                /* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_6312__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n                /* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_3__);\n                /* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_6312__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n                /* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_4__);\n                /* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_6312__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n                /* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_5__);\n                /* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_6312__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n                /* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_6__);\n                /* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_6312__(/*! jspdf */ \"jspdf\");\n                /* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/ __nested_webpack_require_6312__.n(jspdf__WEBPACK_IMPORTED_MODULE_7__);\n                function _typeof(obj) {\n                    \"@babel/helpers - typeof\";\n                    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                        _typeof = function _typeof(obj) {\n                            return typeof obj;\n                        };\n                    } else {\n                        _typeof = function _typeof(obj) {\n                            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                        };\n                    }\n                    return _typeof(obj);\n                }\n                // Import dependencies.\n                // Get dimensions of a PDF page, as determined by jsPDF.\n                jspdf__WEBPACK_IMPORTED_MODULE_7__.jsPDF.getPageSize = function(orientation, unit, format) {\n                    // Decode options object\n                    if (_typeof(orientation) === \"object\") {\n                        var options = orientation;\n                        orientation = options.orientation;\n                        unit = options.unit || unit;\n                        format = options.format || format;\n                    } // Default options\n                    unit = unit || \"mm\";\n                    format = format || \"a4\";\n                    orientation = (\"\" + (orientation || \"P\")).toLowerCase();\n                    var format_as_string = (\"\" + format).toLowerCase(); // Size in pt of various paper formats\n                    var pageFormats = {\n                        \"a0\": [\n                            2383.94,\n                            3370.39\n                        ],\n                        \"a1\": [\n                            1683.78,\n                            2383.94\n                        ],\n                        \"a2\": [\n                            1190.55,\n                            1683.78\n                        ],\n                        \"a3\": [\n                            841.89,\n                            1190.55\n                        ],\n                        \"a4\": [\n                            595.28,\n                            841.89\n                        ],\n                        \"a5\": [\n                            419.53,\n                            595.28\n                        ],\n                        \"a6\": [\n                            297.64,\n                            419.53\n                        ],\n                        \"a7\": [\n                            209.76,\n                            297.64\n                        ],\n                        \"a8\": [\n                            147.40,\n                            209.76\n                        ],\n                        \"a9\": [\n                            104.88,\n                            147.40\n                        ],\n                        \"a10\": [\n                            73.70,\n                            104.88\n                        ],\n                        \"b0\": [\n                            2834.65,\n                            4008.19\n                        ],\n                        \"b1\": [\n                            2004.09,\n                            2834.65\n                        ],\n                        \"b2\": [\n                            1417.32,\n                            2004.09\n                        ],\n                        \"b3\": [\n                            1000.63,\n                            1417.32\n                        ],\n                        \"b4\": [\n                            708.66,\n                            1000.63\n                        ],\n                        \"b5\": [\n                            498.90,\n                            708.66\n                        ],\n                        \"b6\": [\n                            354.33,\n                            498.90\n                        ],\n                        \"b7\": [\n                            249.45,\n                            354.33\n                        ],\n                        \"b8\": [\n                            175.75,\n                            249.45\n                        ],\n                        \"b9\": [\n                            124.72,\n                            175.75\n                        ],\n                        \"b10\": [\n                            87.87,\n                            124.72\n                        ],\n                        \"c0\": [\n                            2599.37,\n                            3676.54\n                        ],\n                        \"c1\": [\n                            1836.85,\n                            2599.37\n                        ],\n                        \"c2\": [\n                            1298.27,\n                            1836.85\n                        ],\n                        \"c3\": [\n                            918.43,\n                            1298.27\n                        ],\n                        \"c4\": [\n                            649.13,\n                            918.43\n                        ],\n                        \"c5\": [\n                            459.21,\n                            649.13\n                        ],\n                        \"c6\": [\n                            323.15,\n                            459.21\n                        ],\n                        \"c7\": [\n                            229.61,\n                            323.15\n                        ],\n                        \"c8\": [\n                            161.57,\n                            229.61\n                        ],\n                        \"c9\": [\n                            113.39,\n                            161.57\n                        ],\n                        \"c10\": [\n                            79.37,\n                            113.39\n                        ],\n                        \"dl\": [\n                            311.81,\n                            623.62\n                        ],\n                        \"letter\": [\n                            612,\n                            792\n                        ],\n                        \"government-letter\": [\n                            576,\n                            756\n                        ],\n                        \"legal\": [\n                            612,\n                            1008\n                        ],\n                        \"junior-legal\": [\n                            576,\n                            360\n                        ],\n                        \"ledger\": [\n                            1224,\n                            792\n                        ],\n                        \"tabloid\": [\n                            792,\n                            1224\n                        ],\n                        \"credit-card\": [\n                            153,\n                            243\n                        ]\n                    }; // Unit conversion\n                    switch(unit){\n                        case \"pt\":\n                            var k = 1;\n                            break;\n                        case \"mm\":\n                            var k = 72 / 25.4;\n                            break;\n                        case \"cm\":\n                            var k = 72 / 2.54;\n                            break;\n                        case \"in\":\n                            var k = 72;\n                            break;\n                        case \"px\":\n                            var k = 72 / 96;\n                            break;\n                        case \"pc\":\n                            var k = 12;\n                            break;\n                        case \"em\":\n                            var k = 12;\n                            break;\n                        case \"ex\":\n                            var k = 6;\n                            break;\n                        default:\n                            throw \"Invalid unit: \" + unit;\n                    } // Dimensions are stored as user units and converted to points on output\n                    if (pageFormats.hasOwnProperty(format_as_string)) {\n                        var pageHeight = pageFormats[format_as_string][1] / k;\n                        var pageWidth = pageFormats[format_as_string][0] / k;\n                    } else {\n                        try {\n                            var pageHeight = format[1];\n                            var pageWidth = format[0];\n                        } catch (err) {\n                            throw new Error(\"Invalid format: \" + format);\n                        }\n                    } // Handle page orientation\n                    if (orientation === \"p\" || orientation === \"portrait\") {\n                        orientation = \"p\";\n                        if (pageWidth > pageHeight) {\n                            var tmp = pageWidth;\n                            pageWidth = pageHeight;\n                            pageHeight = tmp;\n                        }\n                    } else if (orientation === \"l\" || orientation === \"landscape\") {\n                        orientation = \"l\";\n                        if (pageHeight > pageWidth) {\n                            var tmp = pageWidth;\n                            pageWidth = pageHeight;\n                            pageHeight = tmp;\n                        }\n                    } else {\n                        throw \"Invalid orientation: \" + orientation;\n                    } // Return information (k is the unit conversion ratio from pts)\n                    var info = {\n                        \"width\": pageWidth,\n                        \"height\": pageHeight,\n                        \"unit\": unit,\n                        \"k\": k\n                    };\n                    return info;\n                };\n                /* harmony default export */ __nested_webpack_exports__[\"default\"] = jspdf__WEBPACK_IMPORTED_MODULE_7__.jsPDF;\n            /***/ },\n            /***/ \"./src/plugin/pagebreaks.js\": /*!**********************************!*\\\n  !*** ./src/plugin/pagebreaks.js ***!\n  \\**********************************/ /***/ function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_20111__) {\n                \"use strict\";\n                __nested_webpack_require_20111__.r(__nested_webpack_exports__);\n                /* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_20111__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n                /* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_20111__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_0__);\n                /* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_20111__(/*! core-js/modules/es.array.slice.js */ \"./node_modules/core-js/modules/es.array.slice.js\");\n                /* harmony import */ var core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __nested_webpack_require_20111__.n(core_js_modules_es_array_slice_js__WEBPACK_IMPORTED_MODULE_1__);\n                /* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_20111__(/*! core-js/modules/es.array.join.js */ \"./node_modules/core-js/modules/es.array.join.js\");\n                /* harmony import */ var core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __nested_webpack_require_20111__.n(core_js_modules_es_array_join_js__WEBPACK_IMPORTED_MODULE_2__);\n                /* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_20111__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n                /* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __nested_webpack_require_20111__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_3__);\n                /* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_20111__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n                /* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __nested_webpack_require_20111__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_4__);\n                /* harmony import */ var _worker_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_20111__(/*! ../worker.js */ \"./src/worker.js\");\n                /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_20111__(/*! ../utils.js */ \"./src/utils.js\");\n                /* Pagebreak plugin:\n\n    Adds page-break functionality to the html2pdf library. Page-breaks can be\n    enabled by CSS styles, set on individual elements using selectors, or\n    avoided from breaking inside all elements.\n\n    Options on the `opt.pagebreak` object:\n\n    mode:   String or array of strings: 'avoid-all', 'css', and/or 'legacy'\n            Default: ['css', 'legacy']\n\n    before: String or array of CSS selectors for which to add page-breaks\n            before each element. Can be a specific element with an ID\n            ('#myID'), all elements of a type (e.g. 'img'), all of a class\n            ('.myClass'), or even '*' to match every element.\n\n    after:  Like 'before', but adds a page-break immediately after the element.\n\n    avoid:  Like 'before', but avoids page-breaks on these elements. You can\n            enable this feature on every element using the 'avoid-all' mode.\n*/ // Refs to original functions.\n                var orig = {\n                    toContainer: _worker_js__WEBPACK_IMPORTED_MODULE_5__.default.prototype.toContainer\n                }; // Add pagebreak default options to the Worker template.\n                _worker_js__WEBPACK_IMPORTED_MODULE_5__.default.template.opt.pagebreak = {\n                    mode: [\n                        \"css\",\n                        \"legacy\"\n                    ],\n                    before: [],\n                    after: [],\n                    avoid: []\n                };\n                _worker_js__WEBPACK_IMPORTED_MODULE_5__.default.prototype.toContainer = function toContainer() {\n                    return orig.toContainer.call(this).then(function toContainer_pagebreak() {\n                        // Setup root element and inner page height.\n                        var root = this.prop.container;\n                        var pxPageHeight = this.prop.pageSize.inner.px.height; // Check all requested modes.\n                        var modeSrc = [].concat(this.opt.pagebreak.mode);\n                        var mode = {\n                            avoidAll: modeSrc.indexOf(\"avoid-all\") !== -1,\n                            css: modeSrc.indexOf(\"css\") !== -1,\n                            legacy: modeSrc.indexOf(\"legacy\") !== -1\n                        }; // Get arrays of all explicitly requested elements.\n                        var select = {};\n                        var self1 = this;\n                        [\n                            \"before\",\n                            \"after\",\n                            \"avoid\"\n                        ].forEach(function(key) {\n                            var all = mode.avoidAll && key === \"avoid\";\n                            select[key] = all ? [] : [].concat(self1.opt.pagebreak[key] || []);\n                            if (select[key].length > 0) {\n                                select[key] = Array.prototype.slice.call(root.querySelectorAll(select[key].join(\", \")));\n                            }\n                        }); // Get all legacy page-break elements.\n                        var legacyEls = root.querySelectorAll(\".html2pdf__page-break\");\n                        legacyEls = Array.prototype.slice.call(legacyEls); // Loop through all elements.\n                        var els = root.querySelectorAll(\"*\");\n                        Array.prototype.forEach.call(els, function pagebreak_loop(el) {\n                            // Setup pagebreak rules based on legacy and avoidAll modes.\n                            var rules = {\n                                before: false,\n                                after: mode.legacy && legacyEls.indexOf(el) !== -1,\n                                avoid: mode.avoidAll\n                            }; // Add rules for css mode.\n                            if (mode.css) {\n                                // TODO: Check if this is valid with iFrames.\n                                var style = window.getComputedStyle(el); // TODO: Handle 'left' and 'right' correctly.\n                                // TODO: Add support for 'avoid' on breakBefore/After.\n                                var breakOpt = [\n                                    \"always\",\n                                    \"page\",\n                                    \"left\",\n                                    \"right\"\n                                ];\n                                var avoidOpt = [\n                                    \"avoid\",\n                                    \"avoid-page\"\n                                ];\n                                rules = {\n                                    before: rules.before || breakOpt.indexOf(style.breakBefore || style.pageBreakBefore) !== -1,\n                                    after: rules.after || breakOpt.indexOf(style.breakAfter || style.pageBreakAfter) !== -1,\n                                    avoid: rules.avoid || avoidOpt.indexOf(style.breakInside || style.pageBreakInside) !== -1\n                                };\n                            } // Add rules for explicit requests.\n                            Object.keys(rules).forEach(function(key) {\n                                rules[key] = rules[key] || select[key].indexOf(el) !== -1;\n                            }); // Get element position on the screen.\n                            // TODO: Subtract the top of the container from clientRect.top/bottom?\n                            var clientRect = el.getBoundingClientRect(); // Avoid: Check if a break happens mid-element.\n                            if (rules.avoid && !rules.before) {\n                                var startPage = Math.floor(clientRect.top / pxPageHeight);\n                                var endPage = Math.floor(clientRect.bottom / pxPageHeight);\n                                var nPages = Math.abs(clientRect.bottom - clientRect.top) / pxPageHeight; // Turn on rules.before if the el is broken and is at most one page long.\n                                if (endPage !== startPage && nPages <= 1) {\n                                    rules.before = true;\n                                }\n                            } // Before: Create a padding div to push the element to the next page.\n                            if (rules.before) {\n                                var pad = (0, _utils_js__WEBPACK_IMPORTED_MODULE_6__.createElement)(\"div\", {\n                                    style: {\n                                        display: \"block\",\n                                        height: pxPageHeight - clientRect.top % pxPageHeight + \"px\"\n                                    }\n                                });\n                                el.parentNode.insertBefore(pad, el);\n                            } // After: Create a padding div to fill the remaining page.\n                            if (rules.after) {\n                                var pad = (0, _utils_js__WEBPACK_IMPORTED_MODULE_6__.createElement)(\"div\", {\n                                    style: {\n                                        display: \"block\",\n                                        height: pxPageHeight - clientRect.bottom % pxPageHeight + \"px\"\n                                    }\n                                });\n                                el.parentNode.insertBefore(pad, el.nextSibling);\n                            }\n                        });\n                    });\n                };\n            /***/ },\n            /***/ \"./src/utils.js\": /*!**********************!*\\\n  !*** ./src/utils.js ***!\n  \\**********************/ /***/ function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_30346__) {\n                \"use strict\";\n                __nested_webpack_require_30346__.r(__nested_webpack_exports__);\n                /* harmony export */ __nested_webpack_require_30346__.d(__nested_webpack_exports__, {\n                    /* harmony export */ \"objType\": function() {\n                        return /* binding */ objType;\n                    },\n                    /* harmony export */ \"createElement\": function() {\n                        return /* binding */ createElement;\n                    },\n                    /* harmony export */ \"cloneNode\": function() {\n                        return /* binding */ cloneNode;\n                    },\n                    /* harmony export */ \"unitConvert\": function() {\n                        return /* binding */ unitConvert;\n                    },\n                    /* harmony export */ \"toPx\": function() {\n                        return /* binding */ toPx;\n                    }\n                });\n                /* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_30346__(/*! core-js/modules/es.number.constructor.js */ \"./node_modules/core-js/modules/es.number.constructor.js\");\n                /* harmony import */ var core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_es_number_constructor_js__WEBPACK_IMPORTED_MODULE_0__);\n                /* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_30346__(/*! core-js/modules/es.symbol.js */ \"./node_modules/core-js/modules/es.symbol.js\");\n                /* harmony import */ var core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_es_symbol_js__WEBPACK_IMPORTED_MODULE_1__);\n                /* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_30346__(/*! core-js/modules/es.symbol.description.js */ \"./node_modules/core-js/modules/es.symbol.description.js\");\n                /* harmony import */ var core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_es_symbol_description_js__WEBPACK_IMPORTED_MODULE_2__);\n                /* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_30346__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n                /* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_3__);\n                /* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_30346__(/*! core-js/modules/es.symbol.iterator.js */ \"./node_modules/core-js/modules/es.symbol.iterator.js\");\n                /* harmony import */ var core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_es_symbol_iterator_js__WEBPACK_IMPORTED_MODULE_4__);\n                /* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_30346__(/*! core-js/modules/es.array.iterator.js */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n                /* harmony import */ var core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_es_array_iterator_js__WEBPACK_IMPORTED_MODULE_5__);\n                /* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_30346__(/*! core-js/modules/es.string.iterator.js */ \"./node_modules/core-js/modules/es.string.iterator.js\");\n                /* harmony import */ var core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_es_string_iterator_js__WEBPACK_IMPORTED_MODULE_6__);\n                /* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_30346__(/*! core-js/modules/web.dom-collections.iterator.js */ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\");\n                /* harmony import */ var core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/ __nested_webpack_require_30346__.n(core_js_modules_web_dom_collections_iterator_js__WEBPACK_IMPORTED_MODULE_7__);\n                function _typeof(obj) {\n                    \"@babel/helpers - typeof\";\n                    if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n                        _typeof = function _typeof(obj) {\n                            return typeof obj;\n                        };\n                    } else {\n                        _typeof = function _typeof(obj) {\n                            return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n                        };\n                    }\n                    return _typeof(obj);\n                }\n                // Determine the type of a variable/object.\n                var objType = function objType(obj) {\n                    var type = _typeof(obj);\n                    if (type === \"undefined\") return \"undefined\";\n                    else if (type === \"string\" || obj instanceof String) return \"string\";\n                    else if (type === \"number\" || obj instanceof Number) return \"number\";\n                    else if (type === \"function\" || obj instanceof Function) return \"function\";\n                    else if (!!obj && obj.constructor === Array) return \"array\";\n                    else if (obj && obj.nodeType === 1) return \"element\";\n                    else if (type === \"object\") return \"object\";\n                    else return \"unknown\";\n                }; // Create an HTML element with optional className, innerHTML, and style.\n                var createElement = function createElement(tagName, opt) {\n                    var el = document.createElement(tagName);\n                    if (opt.className) el.className = opt.className;\n                    if (opt.innerHTML) {\n                        el.innerHTML = opt.innerHTML;\n                        var scripts = el.getElementsByTagName(\"script\");\n                        for(var i = scripts.length; i-- > 0; null){\n                            scripts[i].parentNode.removeChild(scripts[i]);\n                        }\n                    }\n                    for(var key in opt.style){\n                        el.style[key] = opt.style[key];\n                    }\n                    return el;\n                }; // Deep-clone a node and preserve contents/properties.\n                var cloneNode = function cloneNode(node, javascriptEnabled) {\n                    // Recursively clone the node.\n                    var clone = node.nodeType === 3 ? document.createTextNode(node.nodeValue) : node.cloneNode(false);\n                    for(var child = node.firstChild; child; child = child.nextSibling){\n                        if (javascriptEnabled === true || child.nodeType !== 1 || child.nodeName !== \"SCRIPT\") {\n                            clone.appendChild(cloneNode(child, javascriptEnabled));\n                        }\n                    }\n                    if (node.nodeType === 1) {\n                        // Preserve contents/properties of special nodes.\n                        if (node.nodeName === \"CANVAS\") {\n                            clone.width = node.width;\n                            clone.height = node.height;\n                            clone.getContext(\"2d\").drawImage(node, 0, 0);\n                        } else if (node.nodeName === \"TEXTAREA\" || node.nodeName === \"SELECT\") {\n                            clone.value = node.value;\n                        } // Preserve the node's scroll position when it loads.\n                        clone.addEventListener(\"load\", function() {\n                            clone.scrollTop = node.scrollTop;\n                            clone.scrollLeft = node.scrollLeft;\n                        }, true);\n                    } // Return the cloned node.\n                    return clone;\n                }; // Convert units from px using the conversion value 'k' from jsPDF.\n                var unitConvert = function unitConvert(obj, k) {\n                    if (objType(obj) === \"number\") {\n                        return obj * 72 / 96 / k;\n                    } else {\n                        var newObj = {};\n                        for(var key in obj){\n                            newObj[key] = obj[key] * 72 / 96 / k;\n                        }\n                        return newObj;\n                    }\n                }; // Convert units to px using the conversion value 'k' from jsPDF.\n                var toPx = function toPx(val, k) {\n                    return Math.floor(val * k / 72 * 96);\n                };\n            /***/ },\n            /***/ \"./src/worker.js\": /*!***********************!*\\\n  !*** ./src/worker.js ***!\n  \\***********************/ /***/ function(__unused_webpack_module, __nested_webpack_exports__, __nested_webpack_require_39704__) {\n                \"use strict\";\n                __nested_webpack_require_39704__.r(__nested_webpack_exports__);\n                /* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_39704__(/*! core-js/modules/es.object.assign.js */ \"./node_modules/core-js/modules/es.object.assign.js\");\n                /* harmony import */ var core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_es_object_assign_js__WEBPACK_IMPORTED_MODULE_0__);\n                /* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_39704__(/*! core-js/modules/es.array.map.js */ \"./node_modules/core-js/modules/es.array.map.js\");\n                /* harmony import */ var core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_es_array_map_js__WEBPACK_IMPORTED_MODULE_1__);\n                /* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_39704__(/*! core-js/modules/es.object.keys.js */ \"./node_modules/core-js/modules/es.object.keys.js\");\n                /* harmony import */ var core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_es_object_keys_js__WEBPACK_IMPORTED_MODULE_2__);\n                /* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_39704__(/*! core-js/modules/es.array.concat.js */ \"./node_modules/core-js/modules/es.array.concat.js\");\n                /* harmony import */ var core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_es_array_concat_js__WEBPACK_IMPORTED_MODULE_3__);\n                /* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__ = __nested_webpack_require_39704__(/*! core-js/modules/es.object.to-string.js */ \"./node_modules/core-js/modules/es.object.to-string.js\");\n                /* harmony import */ var core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_es_object_to_string_js__WEBPACK_IMPORTED_MODULE_4__);\n                /* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5__ = __nested_webpack_require_39704__(/*! core-js/modules/es.regexp.to-string.js */ \"./node_modules/core-js/modules/es.regexp.to-string.js\");\n                /* harmony import */ var core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_es_regexp_to_string_js__WEBPACK_IMPORTED_MODULE_5__);\n                /* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6__ = __nested_webpack_require_39704__(/*! core-js/modules/es.function.name.js */ \"./node_modules/core-js/modules/es.function.name.js\");\n                /* harmony import */ var core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_es_function_name_js__WEBPACK_IMPORTED_MODULE_6__);\n                /* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_7__ = __nested_webpack_require_39704__(/*! core-js/modules/web.dom-collections.for-each.js */ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\");\n                /* harmony import */ var core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(core_js_modules_web_dom_collections_for_each_js__WEBPACK_IMPORTED_MODULE_7__);\n                /* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_8__ = __nested_webpack_require_39704__(/*! jspdf */ \"jspdf\");\n                /* harmony import */ var jspdf__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(jspdf__WEBPACK_IMPORTED_MODULE_8__);\n                /* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_9__ = __nested_webpack_require_39704__(/*! html2canvas */ \"html2canvas\");\n                /* harmony import */ var html2canvas__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(html2canvas__WEBPACK_IMPORTED_MODULE_9__);\n                /* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_10__ = __nested_webpack_require_39704__(/*! ./utils.js */ \"./src/utils.js\");\n                /* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_11__ = __nested_webpack_require_39704__(/*! es6-promise */ \"./node_modules/es6-promise/dist/es6-promise.js\");\n                /* harmony import */ var es6_promise__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/ __nested_webpack_require_39704__.n(es6_promise__WEBPACK_IMPORTED_MODULE_11__);\n                var Promise = es6_promise__WEBPACK_IMPORTED_MODULE_11___default().Promise;\n                /* ----- CONSTRUCTOR ----- */ var Worker = function Worker(opt) {\n                    // Create the root parent for the proto chain, and the starting Worker.\n                    var root = Object.assign(Worker.convert(Promise.resolve()), JSON.parse(JSON.stringify(Worker.template)));\n                    var self1 = Worker.convert(Promise.resolve(), root); // Set progress, optional settings, and return.\n                    self1 = self1.setProgress(1, Worker, 1, [\n                        Worker\n                    ]);\n                    self1 = self1.set(opt);\n                    return self1;\n                }; // Boilerplate for subclassing Promise.\n                Worker.prototype = Object.create(Promise.prototype);\n                Worker.prototype.constructor = Worker; // Converts/casts promises into Workers.\n                Worker.convert = function convert(promise, inherit) {\n                    // Uses prototypal inheritance to receive changes made to ancestors' properties.\n                    promise.__proto__ = inherit || Worker.prototype;\n                    return promise;\n                };\n                Worker.template = {\n                    prop: {\n                        src: null,\n                        container: null,\n                        overlay: null,\n                        canvas: null,\n                        img: null,\n                        pdf: null,\n                        pageSize: null\n                    },\n                    progress: {\n                        val: 0,\n                        state: null,\n                        n: 0,\n                        stack: []\n                    },\n                    opt: {\n                        filename: \"file.pdf\",\n                        margin: [\n                            0,\n                            0,\n                            0,\n                            0\n                        ],\n                        image: {\n                            type: \"jpeg\",\n                            quality: 0.95\n                        },\n                        enableLinks: true,\n                        html2canvas: {},\n                        jsPDF: {}\n                    }\n                };\n                /* ----- FROM / TO ----- */ Worker.prototype.from = function from(src, type) {\n                    function getType(src) {\n                        switch((0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.objType)(src)){\n                            case \"string\":\n                                return \"string\";\n                            case \"element\":\n                                return src.nodeName.toLowerCase && src.nodeName.toLowerCase() === \"canvas\" ? \"canvas\" : \"element\";\n                            default:\n                                return \"unknown\";\n                        }\n                    }\n                    return this.then(function from_main() {\n                        type = type || getType(src);\n                        switch(type){\n                            case \"string\":\n                                return this.set({\n                                    src: (0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.createElement)(\"div\", {\n                                        innerHTML: src\n                                    })\n                                });\n                            case \"element\":\n                                return this.set({\n                                    src: src\n                                });\n                            case \"canvas\":\n                                return this.set({\n                                    canvas: src\n                                });\n                            case \"img\":\n                                return this.set({\n                                    img: src\n                                });\n                            default:\n                                return this.error(\"Unknown source type.\");\n                        }\n                    });\n                };\n                Worker.prototype.to = function to(target) {\n                    // Route the 'to' request to the appropriate method.\n                    switch(target){\n                        case \"container\":\n                            return this.toContainer();\n                        case \"canvas\":\n                            return this.toCanvas();\n                        case \"img\":\n                            return this.toImg();\n                        case \"pdf\":\n                            return this.toPdf();\n                        default:\n                            return this.error(\"Invalid target.\");\n                    }\n                };\n                Worker.prototype.toContainer = function toContainer() {\n                    // Set up function prerequisites.\n                    var prereqs = [\n                        function checkSrc() {\n                            return this.prop.src || this.error(\"Cannot duplicate - no source HTML.\");\n                        },\n                        function checkPageSize() {\n                            return this.prop.pageSize || this.setPageSize();\n                        }\n                    ];\n                    return this.thenList(prereqs).then(function toContainer_main() {\n                        // Define the CSS styles for the container and its overlay parent.\n                        var overlayCSS = {\n                            position: \"fixed\",\n                            overflow: \"hidden\",\n                            zIndex: 1000,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            top: 0,\n                            backgroundColor: \"rgba(0,0,0,0.8)\"\n                        };\n                        var containerCSS = {\n                            position: \"absolute\",\n                            width: this.prop.pageSize.inner.width + this.prop.pageSize.unit,\n                            left: 0,\n                            right: 0,\n                            top: 0,\n                            height: \"auto\",\n                            margin: \"auto\",\n                            backgroundColor: \"white\"\n                        }; // Set the overlay to hidden (could be changed in the future to provide a print preview).\n                        overlayCSS.opacity = 0; // Create and attach the elements.\n                        var source = (0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.cloneNode)(this.prop.src, this.opt.html2canvas.javascriptEnabled);\n                        this.prop.overlay = (0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.createElement)(\"div\", {\n                            className: \"html2pdf__overlay\",\n                            style: overlayCSS\n                        });\n                        this.prop.container = (0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.createElement)(\"div\", {\n                            className: \"html2pdf__container\",\n                            style: containerCSS\n                        });\n                        this.prop.container.appendChild(source);\n                        this.prop.overlay.appendChild(this.prop.container);\n                        document.body.appendChild(this.prop.overlay);\n                    });\n                };\n                Worker.prototype.toCanvas = function toCanvas() {\n                    // Set up function prerequisites.\n                    var prereqs = [\n                        function checkContainer() {\n                            return document.body.contains(this.prop.container) || this.toContainer();\n                        }\n                    ]; // Fulfill prereqs then create the canvas.\n                    return this.thenList(prereqs).then(function toCanvas_main() {\n                        // Handle old-fashioned 'onrendered' argument.\n                        var options = Object.assign({}, this.opt.html2canvas);\n                        delete options.onrendered;\n                        return html2canvas__WEBPACK_IMPORTED_MODULE_9__(this.prop.container, options);\n                    }).then(function toCanvas_post(canvas) {\n                        // Handle old-fashioned 'onrendered' argument.\n                        var onRendered = this.opt.html2canvas.onrendered || function() {};\n                        onRendered(canvas);\n                        this.prop.canvas = canvas;\n                        document.body.removeChild(this.prop.overlay);\n                    });\n                };\n                Worker.prototype.toImg = function toImg() {\n                    // Set up function prerequisites.\n                    var prereqs = [\n                        function checkCanvas() {\n                            return this.prop.canvas || this.toCanvas();\n                        }\n                    ]; // Fulfill prereqs then create the image.\n                    return this.thenList(prereqs).then(function toImg_main() {\n                        var imgData = this.prop.canvas.toDataURL(\"image/\" + this.opt.image.type, this.opt.image.quality);\n                        this.prop.img = document.createElement(\"img\");\n                        this.prop.img.src = imgData;\n                    });\n                };\n                Worker.prototype.toPdf = function toPdf() {\n                    // Set up function prerequisites.\n                    var prereqs = [\n                        function checkCanvas() {\n                            return this.prop.canvas || this.toCanvas();\n                        },\n                        function checkPageSize() {\n                            return this.prop.pageSize || this.setPageSize();\n                        }\n                    ]; // Fulfill prereqs then create the image.\n                    return this.thenList(prereqs).then(function toPdf_main() {\n                        // Create local copies of frequently used properties.\n                        var canvas = this.prop.canvas;\n                        var opt = this.opt; // Calculate the number of pages.\n                        var pxFullHeight = canvas.height;\n                        var pxPageHeight = Math.floor(canvas.width * this.prop.pageSize.inner.ratio);\n                        var nPages = Math.ceil(pxFullHeight / pxPageHeight); // Define pageHeight separately so it can be trimmed on the final page.\n                        var pageHeight = this.prop.pageSize.inner.height; // Create a one-page canvas to split up the full image.\n                        var pageCanvas = document.createElement(\"canvas\");\n                        var pageCtx = pageCanvas.getContext(\"2d\");\n                        pageCanvas.width = canvas.width;\n                        pageCanvas.height = pxPageHeight; // Initialize the PDF.\n                        this.prop.pdf = this.prop.pdf || new jspdf__WEBPACK_IMPORTED_MODULE_8__.jsPDF(opt.jsPDF);\n                        for(var page = 0; page < nPages; page++){\n                            // Trim the final page to reduce file size.\n                            if (page === nPages - 1 && pxFullHeight % pxPageHeight !== 0) {\n                                pageCanvas.height = pxFullHeight % pxPageHeight;\n                                pageHeight = pageCanvas.height * this.prop.pageSize.inner.width / pageCanvas.width;\n                            } // Display the page.\n                            var w = pageCanvas.width;\n                            var h = pageCanvas.height;\n                            pageCtx.fillStyle = \"white\";\n                            pageCtx.fillRect(0, 0, w, h);\n                            pageCtx.drawImage(canvas, 0, page * pxPageHeight, w, h, 0, 0, w, h); // Add the page to the PDF.\n                            if (page) this.prop.pdf.addPage();\n                            var imgData = pageCanvas.toDataURL(\"image/\" + opt.image.type, opt.image.quality);\n                            this.prop.pdf.addImage(imgData, opt.image.type, opt.margin[1], opt.margin[0], this.prop.pageSize.inner.width, pageHeight);\n                        }\n                    });\n                };\n                /* ----- OUTPUT / SAVE ----- */ Worker.prototype.output = function output(type, options, src) {\n                    // Redirect requests to the correct function (outputPdf / outputImg).\n                    src = src || \"pdf\";\n                    if (src.toLowerCase() === \"img\" || src.toLowerCase() === \"image\") {\n                        return this.outputImg(type, options);\n                    } else {\n                        return this.outputPdf(type, options);\n                    }\n                };\n                Worker.prototype.outputPdf = function outputPdf(type, options) {\n                    // Set up function prerequisites.\n                    var prereqs = [\n                        function checkPdf() {\n                            return this.prop.pdf || this.toPdf();\n                        }\n                    ]; // Fulfill prereqs then perform the appropriate output.\n                    return this.thenList(prereqs).then(function outputPdf_main() {\n                        /* Currently implemented output types:\n     *    https://rawgit.com/MrRio/jsPDF/master/docs/jspdf.js.html#line992\n     *  save(options), arraybuffer, blob, bloburi/bloburl,\n     *  datauristring/dataurlstring, dataurlnewwindow, datauri/dataurl\n     */ return this.prop.pdf.output(type, options);\n                    });\n                };\n                Worker.prototype.outputImg = function outputImg(type, options) {\n                    // Set up function prerequisites.\n                    var prereqs = [\n                        function checkImg() {\n                            return this.prop.img || this.toImg();\n                        }\n                    ]; // Fulfill prereqs then perform the appropriate output.\n                    return this.thenList(prereqs).then(function outputImg_main() {\n                        switch(type){\n                            case undefined:\n                            case \"img\":\n                                return this.prop.img;\n                            case \"datauristring\":\n                            case \"dataurlstring\":\n                                return this.prop.img.src;\n                            case \"datauri\":\n                            case \"dataurl\":\n                                return document.location.href = this.prop.img.src;\n                            default:\n                                throw 'Image output type \"' + type + '\" is not supported.';\n                        }\n                    });\n                };\n                Worker.prototype.save = function save(filename) {\n                    // Set up function prerequisites.\n                    var prereqs = [\n                        function checkPdf() {\n                            return this.prop.pdf || this.toPdf();\n                        }\n                    ]; // Fulfill prereqs, update the filename (if provided), and save the PDF.\n                    return this.thenList(prereqs).set(filename ? {\n                        filename: filename\n                    } : null).then(function save_main() {\n                        this.prop.pdf.save(this.opt.filename);\n                    });\n                };\n                /* ----- SET / GET ----- */ Worker.prototype.set = function set(opt) {\n                    // TODO: Implement ordered pairs?\n                    // Silently ignore invalid or empty input.\n                    if ((0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.objType)(opt) !== \"object\") {\n                        return this;\n                    } // Build an array of setter functions to queue.\n                    var fns = Object.keys(opt || {}).map(function(key) {\n                        switch(key){\n                            case \"margin\":\n                                return this.setMargin.bind(this, opt.margin);\n                            case \"jsPDF\":\n                                return function set_jsPDF() {\n                                    this.opt.jsPDF = opt.jsPDF;\n                                    return this.setPageSize();\n                                };\n                            case \"pageSize\":\n                                return this.setPageSize.bind(this, opt.pageSize);\n                            default:\n                                if (key in Worker.template.prop) {\n                                    // Set pre-defined properties in prop.\n                                    return function set_prop() {\n                                        this.prop[key] = opt[key];\n                                    };\n                                } else {\n                                    // Set any other properties in opt.\n                                    return function set_opt() {\n                                        this.opt[key] = opt[key];\n                                    };\n                                }\n                        }\n                    }, this); // Set properties within the promise chain.\n                    return this.then(function set_main() {\n                        return this.thenList(fns);\n                    });\n                };\n                Worker.prototype.get = function get(key, cbk) {\n                    return this.then(function get_main() {\n                        // Fetch the requested property, either as a predefined prop or in opt.\n                        var val = key in Worker.template.prop ? this.prop[key] : this.opt[key];\n                        return cbk ? cbk(val) : val;\n                    });\n                };\n                Worker.prototype.setMargin = function setMargin(margin) {\n                    return this.then(function setMargin_main() {\n                        // Parse the margin property: [top, left, bottom, right].\n                        switch((0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.objType)(margin)){\n                            case \"number\":\n                                margin = [\n                                    margin,\n                                    margin,\n                                    margin,\n                                    margin\n                                ];\n                            case \"array\":\n                                if (margin.length === 2) {\n                                    margin = [\n                                        margin[0],\n                                        margin[1],\n                                        margin[0],\n                                        margin[1]\n                                    ];\n                                }\n                                if (margin.length === 4) {\n                                    break;\n                                }\n                            default:\n                                return this.error(\"Invalid margin array.\");\n                        } // Set the margin property, then update pageSize.\n                        this.opt.margin = margin;\n                    }).then(this.setPageSize);\n                };\n                Worker.prototype.setPageSize = function setPageSize(pageSize) {\n                    return this.then(function setPageSize_main() {\n                        // Retrieve page-size based on jsPDF settings, if not explicitly provided.\n                        pageSize = pageSize || jspdf__WEBPACK_IMPORTED_MODULE_8__.jsPDF.getPageSize(this.opt.jsPDF); // Add 'inner' field if not present.\n                        if (!pageSize.hasOwnProperty(\"inner\")) {\n                            pageSize.inner = {\n                                width: pageSize.width - this.opt.margin[1] - this.opt.margin[3],\n                                height: pageSize.height - this.opt.margin[0] - this.opt.margin[2]\n                            };\n                            pageSize.inner.px = {\n                                width: (0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.toPx)(pageSize.inner.width, pageSize.k),\n                                height: (0, _utils_js__WEBPACK_IMPORTED_MODULE_10__.toPx)(pageSize.inner.height, pageSize.k)\n                            };\n                            pageSize.inner.ratio = pageSize.inner.height / pageSize.inner.width;\n                        } // Attach pageSize to this.\n                        this.prop.pageSize = pageSize;\n                    });\n                };\n                Worker.prototype.setProgress = function setProgress(val, state, n, stack) {\n                    // Immediately update all progress values.\n                    if (val != null) this.progress.val = val;\n                    if (state != null) this.progress.state = state;\n                    if (n != null) this.progress.n = n;\n                    if (stack != null) this.progress.stack = stack;\n                    this.progress.ratio = this.progress.val / this.progress.state; // Return this for command chaining.\n                    return this;\n                };\n                Worker.prototype.updateProgress = function updateProgress(val, state, n, stack) {\n                    // Immediately update all progress values, using setProgress.\n                    return this.setProgress(val ? this.progress.val + val : null, state ? state : null, n ? this.progress.n + n : null, stack ? this.progress.stack.concat(stack) : null);\n                };\n                /* ----- PROMISE MAPPING ----- */ Worker.prototype.then = function then(onFulfilled, onRejected) {\n                    // Wrap `this` for encapsulation.\n                    var self1 = this;\n                    return this.thenCore(onFulfilled, onRejected, function then_main(onFulfilled, onRejected) {\n                        // Update progress while queuing, calling, and resolving `then`.\n                        self1.updateProgress(null, null, 1, [\n                            onFulfilled\n                        ]);\n                        return Promise.prototype.then.call(this, function then_pre(val) {\n                            self1.updateProgress(null, onFulfilled);\n                            return val;\n                        }).then(onFulfilled, onRejected).then(function then_post(val) {\n                            self1.updateProgress(1);\n                            return val;\n                        });\n                    });\n                };\n                Worker.prototype.thenCore = function thenCore(onFulfilled, onRejected, thenBase) {\n                    // Handle optional thenBase parameter.\n                    thenBase = thenBase || Promise.prototype.then; // Wrap `this` for encapsulation and bind it to the promise handlers.\n                    var self1 = this;\n                    if (onFulfilled) {\n                        onFulfilled = onFulfilled.bind(self1);\n                    }\n                    if (onRejected) {\n                        onRejected = onRejected.bind(self1);\n                    } // Cast self into a Promise to avoid polyfills recursively defining `then`.\n                    var isNative = Promise.toString().indexOf(\"[native code]\") !== -1 && Promise.name === \"Promise\";\n                    var selfPromise = isNative ? self1 : Worker.convert(Object.assign({}, self1), Promise.prototype); // Return the promise, after casting it into a Worker and preserving props.\n                    var returnVal = thenBase.call(selfPromise, onFulfilled, onRejected);\n                    return Worker.convert(returnVal, self1.__proto__);\n                };\n                Worker.prototype.thenExternal = function thenExternal(onFulfilled, onRejected) {\n                    // Call `then` and return a standard promise (exits the Worker chain).\n                    return Promise.prototype.then.call(this, onFulfilled, onRejected);\n                };\n                Worker.prototype.thenList = function thenList(fns) {\n                    // Queue a series of promise 'factories' into the promise chain.\n                    var self1 = this;\n                    fns.forEach(function thenList_forEach(fn) {\n                        self1 = self1.thenCore(fn);\n                    });\n                    return self1;\n                };\n                Worker.prototype[\"catch\"] = function(onRejected) {\n                    // Bind `this` to the promise handler, call `catch`, and return a Worker.\n                    if (onRejected) {\n                        onRejected = onRejected.bind(this);\n                    }\n                    var returnVal = Promise.prototype[\"catch\"].call(this, onRejected);\n                    return Worker.convert(returnVal, this);\n                };\n                Worker.prototype.catchExternal = function catchExternal(onRejected) {\n                    // Call `catch` and return a standard promise (exits the Worker chain).\n                    return Promise.prototype[\"catch\"].call(this, onRejected);\n                };\n                Worker.prototype.error = function error(msg) {\n                    // Throw the error in the Promise chain.\n                    return this.then(function error_main() {\n                        throw new Error(msg);\n                    });\n                };\n                /* ----- ALIASES ----- */ Worker.prototype.using = Worker.prototype.set;\n                Worker.prototype.saveAs = Worker.prototype.save;\n                Worker.prototype.export = Worker.prototype.output;\n                Worker.prototype.run = Worker.prototype.then;\n                /* ----- FINISHING ----- */ // Expose the Worker class.\n                /* harmony default export */ __nested_webpack_exports__[\"default\"] = Worker;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/a-function.js\": /*!******************************************************!*\\\n  !*** ./node_modules/core-js/internals/a-function.js ***!\n  \\******************************************************/ /***/ function(module1) {\n                module1.exports = function(it) {\n                    if (typeof it != \"function\") {\n                        throw TypeError(String(it) + \" is not a function\");\n                    }\n                    return it;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/a-possible-prototype.js\": /*!****************************************************************!*\\\n  !*** ./node_modules/core-js/internals/a-possible-prototype.js ***!\n  \\****************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_71246__) {\n                var isObject = __nested_webpack_require_71246__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                module1.exports = function(it) {\n                    if (!isObject(it) && it !== null) {\n                        throw TypeError(\"Can't set \" + String(it) + \" as a prototype\");\n                    }\n                    return it;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/add-to-unscopables.js\": /*!**************************************************************!*\\\n  !*** ./node_modules/core-js/internals/add-to-unscopables.js ***!\n  \\**************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_72015__) {\n                var wellKnownSymbol = __nested_webpack_require_72015__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var create = __nested_webpack_require_72015__(/*! ../internals/object-create */ \"./node_modules/core-js/internals/object-create.js\");\n                var definePropertyModule = __nested_webpack_require_72015__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\");\n                var UNSCOPABLES = wellKnownSymbol(\"unscopables\");\n                var ArrayPrototype = Array.prototype;\n                // Array.prototype[@@unscopables]\n                // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\n                if (ArrayPrototype[UNSCOPABLES] == undefined) {\n                    definePropertyModule.f(ArrayPrototype, UNSCOPABLES, {\n                        configurable: true,\n                        value: create(null)\n                    });\n                }\n                // add a key to Array.prototype[@@unscopables]\n                module1.exports = function(key) {\n                    ArrayPrototype[UNSCOPABLES][key] = true;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/an-object.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/an-object.js ***!\n  \\*****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_73521__) {\n                var isObject = __nested_webpack_require_73521__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                module1.exports = function(it) {\n                    if (!isObject(it)) {\n                        throw TypeError(String(it) + \" is not an object\");\n                    }\n                    return it;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/array-for-each.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/internals/array-for-each.js ***!\n  \\**********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_74246__) {\n                \"use strict\";\n                var $forEach = __nested_webpack_require_74246__(/*! ../internals/array-iteration */ \"./node_modules/core-js/internals/array-iteration.js\").forEach;\n                var arrayMethodIsStrict = __nested_webpack_require_74246__(/*! ../internals/array-method-is-strict */ \"./node_modules/core-js/internals/array-method-is-strict.js\");\n                var STRICT_METHOD = arrayMethodIsStrict(\"forEach\");\n                // `Array.prototype.forEach` method implementation\n                // https://tc39.es/ecma262/#sec-array.prototype.foreach\n                module1.exports = !STRICT_METHOD ? function forEach(callbackfn /* , thisArg */ ) {\n                    return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n                // eslint-disable-next-line es/no-array-prototype-foreach -- safe\n                } : [].forEach;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/array-includes.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/internals/array-includes.js ***!\n  \\**********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_75476__) {\n                var toIndexedObject = __nested_webpack_require_75476__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var toLength = __nested_webpack_require_75476__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\n                var toAbsoluteIndex = __nested_webpack_require_75476__(/*! ../internals/to-absolute-index */ \"./node_modules/core-js/internals/to-absolute-index.js\");\n                // `Array.prototype.{ indexOf, includes }` methods implementation\n                var createMethod = function(IS_INCLUDES) {\n                    return function($this, el, fromIndex) {\n                        var O = toIndexedObject($this);\n                        var length = toLength(O.length);\n                        var index = toAbsoluteIndex(fromIndex, length);\n                        var value;\n                        // Array#includes uses SameValueZero equality algorithm\n                        // eslint-disable-next-line no-self-compare -- NaN check\n                        if (IS_INCLUDES && el != el) while(length > index){\n                            value = O[index++];\n                            // eslint-disable-next-line no-self-compare -- NaN check\n                            if (value != value) return true;\n                        // Array#indexOf ignores holes, Array#includes - not\n                        }\n                        else for(; length > index; index++){\n                            if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;\n                        }\n                        return !IS_INCLUDES && -1;\n                    };\n                };\n                module1.exports = {\n                    // `Array.prototype.includes` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.includes\n                    includes: createMethod(true),\n                    // `Array.prototype.indexOf` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.indexof\n                    indexOf: createMethod(false)\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/array-iteration.js\": /*!***********************************************************!*\\\n  !*** ./node_modules/core-js/internals/array-iteration.js ***!\n  \\***********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_77945__) {\n                var bind = __nested_webpack_require_77945__(/*! ../internals/function-bind-context */ \"./node_modules/core-js/internals/function-bind-context.js\");\n                var IndexedObject = __nested_webpack_require_77945__(/*! ../internals/indexed-object */ \"./node_modules/core-js/internals/indexed-object.js\");\n                var toObject = __nested_webpack_require_77945__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\n                var toLength = __nested_webpack_require_77945__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\n                var arraySpeciesCreate = __nested_webpack_require_77945__(/*! ../internals/array-species-create */ \"./node_modules/core-js/internals/array-species-create.js\");\n                var push = [].push;\n                // `Array.prototype.{ forEach, map, filter, some, every, find, findIndex, filterReject }` methods implementation\n                var createMethod = function(TYPE) {\n                    var IS_MAP = TYPE == 1;\n                    var IS_FILTER = TYPE == 2;\n                    var IS_SOME = TYPE == 3;\n                    var IS_EVERY = TYPE == 4;\n                    var IS_FIND_INDEX = TYPE == 6;\n                    var IS_FILTER_REJECT = TYPE == 7;\n                    var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n                    return function($this, callbackfn, that, specificCreate) {\n                        var O = toObject($this);\n                        var self1 = IndexedObject(O);\n                        var boundFunction = bind(callbackfn, that, 3);\n                        var length = toLength(self1.length);\n                        var index = 0;\n                        var create = specificCreate || arraySpeciesCreate;\n                        var target = IS_MAP ? create($this, length) : IS_FILTER || IS_FILTER_REJECT ? create($this, 0) : undefined;\n                        var value, result;\n                        for(; length > index; index++)if (NO_HOLES || index in self1) {\n                            value = self1[index];\n                            result = boundFunction(value, index, O);\n                            if (TYPE) {\n                                if (IS_MAP) target[index] = result; // map\n                                else if (result) switch(TYPE){\n                                    case 3:\n                                        return true; // some\n                                    case 5:\n                                        return value; // find\n                                    case 6:\n                                        return index; // findIndex\n                                    case 2:\n                                        push.call(target, value); // filter\n                                }\n                                else switch(TYPE){\n                                    case 4:\n                                        return false; // every\n                                    case 7:\n                                        push.call(target, value); // filterReject\n                                }\n                            }\n                        }\n                        return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;\n                    };\n                };\n                module1.exports = {\n                    // `Array.prototype.forEach` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.foreach\n                    forEach: createMethod(0),\n                    // `Array.prototype.map` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.map\n                    map: createMethod(1),\n                    // `Array.prototype.filter` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.filter\n                    filter: createMethod(2),\n                    // `Array.prototype.some` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.some\n                    some: createMethod(3),\n                    // `Array.prototype.every` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.every\n                    every: createMethod(4),\n                    // `Array.prototype.find` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.find\n                    find: createMethod(5),\n                    // `Array.prototype.findIndex` method\n                    // https://tc39.es/ecma262/#sec-array.prototype.findIndex\n                    findIndex: createMethod(6),\n                    // `Array.prototype.filterReject` method\n                    // https://github.com/tc39/proposal-array-filtering\n                    filterReject: createMethod(7)\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/array-method-has-species-support.js\": /*!****************************************************************************!*\\\n  !*** ./node_modules/core-js/internals/array-method-has-species-support.js ***!\n  \\****************************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_83087__) {\n                var fails = __nested_webpack_require_83087__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var wellKnownSymbol = __nested_webpack_require_83087__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var V8_VERSION = __nested_webpack_require_83087__(/*! ../internals/engine-v8-version */ \"./node_modules/core-js/internals/engine-v8-version.js\");\n                var SPECIES = wellKnownSymbol(\"species\");\n                module1.exports = function(METHOD_NAME) {\n                    // We can't use this feature detection in V8 since it causes\n                    // deoptimization and serious performance degradation\n                    // https://github.com/zloirock/core-js/issues/677\n                    return V8_VERSION >= 51 || !fails(function() {\n                        var array = [];\n                        var constructor = array.constructor = {};\n                        constructor[SPECIES] = function() {\n                            return {\n                                foo: 1\n                            };\n                        };\n                        return array[METHOD_NAME](Boolean).foo !== 1;\n                    });\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/array-method-is-strict.js\": /*!******************************************************************!*\\\n  !*** ./node_modules/core-js/internals/array-method-is-strict.js ***!\n  \\******************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_84720__) {\n                \"use strict\";\n                var fails = __nested_webpack_require_84720__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                module1.exports = function(METHOD_NAME, argument) {\n                    var method = [][METHOD_NAME];\n                    return !!method && fails(function() {\n                        // eslint-disable-next-line no-useless-call,no-throw-literal -- required for testing\n                        method.call(null, argument || function() {\n                            throw 1;\n                        }, 1);\n                    });\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/array-species-constructor.js\": /*!*********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/array-species-constructor.js ***!\n  \\*********************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_85734__) {\n                var isObject = __nested_webpack_require_85734__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var isArray = __nested_webpack_require_85734__(/*! ../internals/is-array */ \"./node_modules/core-js/internals/is-array.js\");\n                var wellKnownSymbol = __nested_webpack_require_85734__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var SPECIES = wellKnownSymbol(\"species\");\n                // a part of `ArraySpeciesCreate` abstract operation\n                // https://tc39.es/ecma262/#sec-arrayspeciescreate\n                module1.exports = function(originalArray) {\n                    var C;\n                    if (isArray(originalArray)) {\n                        C = originalArray.constructor;\n                        // cross-realm fallback\n                        if (typeof C == \"function\" && (C === Array || isArray(C.prototype))) C = undefined;\n                        else if (isObject(C)) {\n                            C = C[SPECIES];\n                            if (C === null) C = undefined;\n                        }\n                    }\n                    return C === undefined ? Array : C;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/array-species-create.js\": /*!****************************************************************!*\\\n  !*** ./node_modules/core-js/internals/array-species-create.js ***!\n  \\****************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_87344__) {\n                var arraySpeciesConstructor = __nested_webpack_require_87344__(/*! ../internals/array-species-constructor */ \"./node_modules/core-js/internals/array-species-constructor.js\");\n                // `ArraySpeciesCreate` abstract operation\n                // https://tc39.es/ecma262/#sec-arrayspeciescreate\n                module1.exports = function(originalArray, length) {\n                    return new (arraySpeciesConstructor(originalArray))(length === 0 ? 0 : length);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/classof-raw.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/internals/classof-raw.js ***!\n  \\*******************************************************/ /***/ function(module1) {\n                var toString = {}.toString;\n                module1.exports = function(it) {\n                    return toString.call(it).slice(8, -1);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/classof.js\": /*!***************************************************!*\\\n  !*** ./node_modules/core-js/internals/classof.js ***!\n  \\***************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_88633__) {\n                var TO_STRING_TAG_SUPPORT = __nested_webpack_require_88633__(/*! ../internals/to-string-tag-support */ \"./node_modules/core-js/internals/to-string-tag-support.js\");\n                var classofRaw = __nested_webpack_require_88633__(/*! ../internals/classof-raw */ \"./node_modules/core-js/internals/classof-raw.js\");\n                var wellKnownSymbol = __nested_webpack_require_88633__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var TO_STRING_TAG = wellKnownSymbol(\"toStringTag\");\n                // ES3 wrong here\n                var CORRECT_ARGUMENTS = classofRaw(function() {\n                    return arguments;\n                }()) == \"Arguments\";\n                // fallback for IE11 Script Access Denied error\n                var tryGet = function(it, key) {\n                    try {\n                        return it[key];\n                    } catch (error) {}\n                };\n                // getting tag from ES6+ `Object.prototype.toString`\n                module1.exports = TO_STRING_TAG_SUPPORT ? classofRaw : function(it) {\n                    var O, tag, result;\n                    return it === undefined ? \"Undefined\" : it === null ? \"Null\" : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == \"string\" ? tag : CORRECT_ARGUMENTS ? classofRaw(O) : (result = classofRaw(O)) == \"Object\" && typeof O.callee == \"function\" ? \"Arguments\" : result;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/copy-constructor-properties.js\": /*!***********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/copy-constructor-properties.js ***!\n  \\***********************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_90479__) {\n                var has = __nested_webpack_require_90479__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var ownKeys = __nested_webpack_require_90479__(/*! ../internals/own-keys */ \"./node_modules/core-js/internals/own-keys.js\");\n                var getOwnPropertyDescriptorModule = __nested_webpack_require_90479__(/*! ../internals/object-get-own-property-descriptor */ \"./node_modules/core-js/internals/object-get-own-property-descriptor.js\");\n                var definePropertyModule = __nested_webpack_require_90479__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\");\n                module1.exports = function(target, source) {\n                    var keys = ownKeys(source);\n                    var defineProperty = definePropertyModule.f;\n                    var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n                    for(var i = 0; i < keys.length; i++){\n                        var key = keys[i];\n                        if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));\n                    }\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/correct-prototype-getter.js\": /*!********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/correct-prototype-getter.js ***!\n  \\********************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_92006__) {\n                var fails = __nested_webpack_require_92006__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                module1.exports = !fails(function() {\n                    function F() {}\n                    F.prototype.constructor = null;\n                    // eslint-disable-next-line es/no-object-getprototypeof -- required for testing\n                    return Object.getPrototypeOf(new F()) !== F.prototype;\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/create-html.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/internals/create-html.js ***!\n  \\*******************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_92808__) {\n                var requireObjectCoercible = __nested_webpack_require_92808__(/*! ../internals/require-object-coercible */ \"./node_modules/core-js/internals/require-object-coercible.js\");\n                var toString = __nested_webpack_require_92808__(/*! ../internals/to-string */ \"./node_modules/core-js/internals/to-string.js\");\n                var quot = /\"/g;\n                // `CreateHTML` abstract operation\n                // https://tc39.es/ecma262/#sec-createhtml\n                module1.exports = function(string, tag, attribute, value) {\n                    var S = toString(requireObjectCoercible(string));\n                    var p1 = \"<\" + tag;\n                    if (attribute !== \"\") p1 += \" \" + attribute + '=\"' + toString(value).replace(quot, \"&quot;\") + '\"';\n                    return p1 + \">\" + S + \"</\" + tag + \">\";\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/create-iterator-constructor.js\": /*!***********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/create-iterator-constructor.js ***!\n  \\***********************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_94051__) {\n                \"use strict\";\n                var IteratorPrototype = __nested_webpack_require_94051__(/*! ../internals/iterators-core */ \"./node_modules/core-js/internals/iterators-core.js\").IteratorPrototype;\n                var create = __nested_webpack_require_94051__(/*! ../internals/object-create */ \"./node_modules/core-js/internals/object-create.js\");\n                var createPropertyDescriptor = __nested_webpack_require_94051__(/*! ../internals/create-property-descriptor */ \"./node_modules/core-js/internals/create-property-descriptor.js\");\n                var setToStringTag = __nested_webpack_require_94051__(/*! ../internals/set-to-string-tag */ \"./node_modules/core-js/internals/set-to-string-tag.js\");\n                var Iterators = __nested_webpack_require_94051__(/*! ../internals/iterators */ \"./node_modules/core-js/internals/iterators.js\");\n                var returnThis = function() {\n                    return this;\n                };\n                module1.exports = function(IteratorConstructor, NAME, next) {\n                    var TO_STRING_TAG = NAME + \" Iterator\";\n                    IteratorConstructor.prototype = create(IteratorPrototype, {\n                        next: createPropertyDescriptor(1, next)\n                    });\n                    setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);\n                    Iterators[TO_STRING_TAG] = returnThis;\n                    return IteratorConstructor;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/create-non-enumerable-property.js\": /*!**************************************************************************!*\\\n  !*** ./node_modules/core-js/internals/create-non-enumerable-property.js ***!\n  \\**************************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_95888__) {\n                var DESCRIPTORS = __nested_webpack_require_95888__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var definePropertyModule = __nested_webpack_require_95888__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\");\n                var createPropertyDescriptor = __nested_webpack_require_95888__(/*! ../internals/create-property-descriptor */ \"./node_modules/core-js/internals/create-property-descriptor.js\");\n                module1.exports = DESCRIPTORS ? function(object, key, value) {\n                    return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));\n                } : function(object, key, value) {\n                    object[key] = value;\n                    return object;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/create-property-descriptor.js\": /*!**********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/create-property-descriptor.js ***!\n  \\**********************************************************************/ /***/ function(module1) {\n                module1.exports = function(bitmap, value) {\n                    return {\n                        enumerable: !(bitmap & 1),\n                        configurable: !(bitmap & 2),\n                        writable: !(bitmap & 4),\n                        value: value\n                    };\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/create-property.js\": /*!***********************************************************!*\\\n  !*** ./node_modules/core-js/internals/create-property.js ***!\n  \\***********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_97741__) {\n                \"use strict\";\n                var toPropertyKey = __nested_webpack_require_97741__(/*! ../internals/to-property-key */ \"./node_modules/core-js/internals/to-property-key.js\");\n                var definePropertyModule = __nested_webpack_require_97741__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\");\n                var createPropertyDescriptor = __nested_webpack_require_97741__(/*! ../internals/create-property-descriptor */ \"./node_modules/core-js/internals/create-property-descriptor.js\");\n                module1.exports = function(object, key, value) {\n                    var propertyKey = toPropertyKey(key);\n                    if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));\n                    else object[propertyKey] = value;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/define-iterator.js\": /*!***********************************************************!*\\\n  !*** ./node_modules/core-js/internals/define-iterator.js ***!\n  \\***********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_98954__) {\n                \"use strict\";\n                var $ = __nested_webpack_require_98954__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var createIteratorConstructor = __nested_webpack_require_98954__(/*! ../internals/create-iterator-constructor */ \"./node_modules/core-js/internals/create-iterator-constructor.js\");\n                var getPrototypeOf = __nested_webpack_require_98954__(/*! ../internals/object-get-prototype-of */ \"./node_modules/core-js/internals/object-get-prototype-of.js\");\n                var setPrototypeOf = __nested_webpack_require_98954__(/*! ../internals/object-set-prototype-of */ \"./node_modules/core-js/internals/object-set-prototype-of.js\");\n                var setToStringTag = __nested_webpack_require_98954__(/*! ../internals/set-to-string-tag */ \"./node_modules/core-js/internals/set-to-string-tag.js\");\n                var createNonEnumerableProperty = __nested_webpack_require_98954__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                var redefine = __nested_webpack_require_98954__(/*! ../internals/redefine */ \"./node_modules/core-js/internals/redefine.js\");\n                var wellKnownSymbol = __nested_webpack_require_98954__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var IS_PURE = __nested_webpack_require_98954__(/*! ../internals/is-pure */ \"./node_modules/core-js/internals/is-pure.js\");\n                var Iterators = __nested_webpack_require_98954__(/*! ../internals/iterators */ \"./node_modules/core-js/internals/iterators.js\");\n                var IteratorsCore = __nested_webpack_require_98954__(/*! ../internals/iterators-core */ \"./node_modules/core-js/internals/iterators-core.js\");\n                var IteratorPrototype = IteratorsCore.IteratorPrototype;\n                var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;\n                var ITERATOR = wellKnownSymbol(\"iterator\");\n                var KEYS = \"keys\";\n                var VALUES = \"values\";\n                var ENTRIES = \"entries\";\n                var returnThis = function() {\n                    return this;\n                };\n                module1.exports = function(Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {\n                    createIteratorConstructor(IteratorConstructor, NAME, next);\n                    var getIterationMethod = function(KIND) {\n                        if (KIND === DEFAULT && defaultIterator) return defaultIterator;\n                        if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];\n                        switch(KIND){\n                            case KEYS:\n                                return function keys() {\n                                    return new IteratorConstructor(this, KIND);\n                                };\n                            case VALUES:\n                                return function values() {\n                                    return new IteratorConstructor(this, KIND);\n                                };\n                            case ENTRIES:\n                                return function entries() {\n                                    return new IteratorConstructor(this, KIND);\n                                };\n                        }\n                        return function() {\n                            return new IteratorConstructor(this);\n                        };\n                    };\n                    var TO_STRING_TAG = NAME + \" Iterator\";\n                    var INCORRECT_VALUES_NAME = false;\n                    var IterablePrototype = Iterable.prototype;\n                    var nativeIterator = IterablePrototype[ITERATOR] || IterablePrototype[\"@@iterator\"] || DEFAULT && IterablePrototype[DEFAULT];\n                    var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);\n                    var anyNativeIterator = NAME == \"Array\" ? IterablePrototype.entries || nativeIterator : nativeIterator;\n                    var CurrentIteratorPrototype, methods, KEY;\n                    // fix native\n                    if (anyNativeIterator) {\n                        CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));\n                        if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {\n                            if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {\n                                if (setPrototypeOf) {\n                                    setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);\n                                } else if (typeof CurrentIteratorPrototype[ITERATOR] != \"function\") {\n                                    createNonEnumerableProperty(CurrentIteratorPrototype, ITERATOR, returnThis);\n                                }\n                            }\n                            // Set @@toStringTag to native iterators\n                            setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);\n                            if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;\n                        }\n                    }\n                    // fix Array.prototype.{ values, @@iterator }.name in V8 / FF\n                    if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {\n                        INCORRECT_VALUES_NAME = true;\n                        defaultIterator = function values() {\n                            return nativeIterator.call(this);\n                        };\n                    }\n                    // define iterator\n                    if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {\n                        createNonEnumerableProperty(IterablePrototype, ITERATOR, defaultIterator);\n                    }\n                    Iterators[NAME] = defaultIterator;\n                    // export additional methods\n                    if (DEFAULT) {\n                        methods = {\n                            values: getIterationMethod(VALUES),\n                            keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),\n                            entries: getIterationMethod(ENTRIES)\n                        };\n                        if (FORCED) for(KEY in methods){\n                            if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {\n                                redefine(IterablePrototype, KEY, methods[KEY]);\n                            }\n                        }\n                        else $({\n                            target: NAME,\n                            proto: true,\n                            forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME\n                        }, methods);\n                    }\n                    return methods;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/define-well-known-symbol.js\": /*!********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/define-well-known-symbol.js ***!\n  \\********************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_106255__) {\n                var path = __nested_webpack_require_106255__(/*! ../internals/path */ \"./node_modules/core-js/internals/path.js\");\n                var has = __nested_webpack_require_106255__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var wrappedWellKnownSymbolModule = __nested_webpack_require_106255__(/*! ../internals/well-known-symbol-wrapped */ \"./node_modules/core-js/internals/well-known-symbol-wrapped.js\");\n                var defineProperty = __nested_webpack_require_106255__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\").f;\n                module1.exports = function(NAME) {\n                    var Symbol1 = path.Symbol || (path.Symbol = {});\n                    if (!has(Symbol1, NAME)) defineProperty(Symbol1, NAME, {\n                        value: wrappedWellKnownSymbolModule.f(NAME)\n                    });\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/descriptors.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/internals/descriptors.js ***!\n  \\*******************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_107487__) {\n                var fails = __nested_webpack_require_107487__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                // Detect IE8's incomplete defineProperty implementation\n                module1.exports = !fails(function() {\n                    // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n                    return Object.defineProperty({}, 1, {\n                        get: function() {\n                            return 7;\n                        }\n                    })[1] != 7;\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/document-create-element.js\": /*!*******************************************************************!*\\\n  !*** ./node_modules/core-js/internals/document-create-element.js ***!\n  \\*******************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_108443__) {\n                var global1 = __nested_webpack_require_108443__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var isObject = __nested_webpack_require_108443__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var document1 = global1.document;\n                // typeof document.createElement is 'object' in old IE\n                var EXISTS = isObject(document1) && isObject(document1.createElement);\n                module1.exports = function(it) {\n                    return EXISTS ? document1.createElement(it) : {};\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/dom-iterables.js\": /*!*********************************************************!*\\\n  !*** ./node_modules/core-js/internals/dom-iterables.js ***!\n  \\*********************************************************/ /***/ function(module1) {\n                // iterable DOM collections\n                // flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods\n                module1.exports = {\n                    CSSRuleList: 0,\n                    CSSStyleDeclaration: 0,\n                    CSSValueList: 0,\n                    ClientRectList: 0,\n                    DOMRectList: 0,\n                    DOMStringList: 0,\n                    DOMTokenList: 1,\n                    DataTransferItemList: 0,\n                    FileList: 0,\n                    HTMLAllCollection: 0,\n                    HTMLCollection: 0,\n                    HTMLFormElement: 0,\n                    HTMLSelectElement: 0,\n                    MediaList: 0,\n                    MimeTypeArray: 0,\n                    NamedNodeMap: 0,\n                    NodeList: 1,\n                    PaintRequestList: 0,\n                    Plugin: 0,\n                    PluginArray: 0,\n                    SVGLengthList: 0,\n                    SVGNumberList: 0,\n                    SVGPathSegList: 0,\n                    SVGPointList: 0,\n                    SVGStringList: 0,\n                    SVGTransformList: 0,\n                    SourceBufferList: 0,\n                    StyleSheetList: 0,\n                    TextTrackCueList: 0,\n                    TextTrackList: 0,\n                    TouchList: 0\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/engine-user-agent.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/internals/engine-user-agent.js ***!\n  \\*************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_111095__) {\n                var getBuiltIn = __nested_webpack_require_111095__(/*! ../internals/get-built-in */ \"./node_modules/core-js/internals/get-built-in.js\");\n                module1.exports = getBuiltIn(\"navigator\", \"userAgent\") || \"\";\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/engine-v8-version.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/internals/engine-v8-version.js ***!\n  \\*************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_111681__) {\n                var global1 = __nested_webpack_require_111681__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var userAgent = __nested_webpack_require_111681__(/*! ../internals/engine-user-agent */ \"./node_modules/core-js/internals/engine-user-agent.js\");\n                var process1 = global1.process;\n                var Deno = global1.Deno;\n                var versions = process1 && process1.versions || Deno && Deno.version;\n                var v8 = versions && versions.v8;\n                var match, version;\n                if (v8) {\n                    match = v8.split(\".\");\n                    version = match[0] < 4 ? 1 : match[0] + match[1];\n                } else if (userAgent) {\n                    match = userAgent.match(/Edge\\/(\\d+)/);\n                    if (!match || match[1] >= 74) {\n                        match = userAgent.match(/Chrome\\/(\\d+)/);\n                        if (match) version = match[1];\n                    }\n                }\n                module1.exports = version && +version;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/enum-bug-keys.js\": /*!*********************************************************!*\\\n  !*** ./node_modules/core-js/internals/enum-bug-keys.js ***!\n  \\*********************************************************/ /***/ function(module1) {\n                // IE8- don't enum bug keys\n                module1.exports = [\n                    \"constructor\",\n                    \"hasOwnProperty\",\n                    \"isPrototypeOf\",\n                    \"propertyIsEnumerable\",\n                    \"toLocaleString\",\n                    \"toString\",\n                    \"valueOf\"\n                ];\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/export.js\": /*!**************************************************!*\\\n  !*** ./node_modules/core-js/internals/export.js ***!\n  \\**************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_113705__) {\n                var global1 = __nested_webpack_require_113705__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var getOwnPropertyDescriptor = __nested_webpack_require_113705__(/*! ../internals/object-get-own-property-descriptor */ \"./node_modules/core-js/internals/object-get-own-property-descriptor.js\").f;\n                var createNonEnumerableProperty = __nested_webpack_require_113705__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                var redefine = __nested_webpack_require_113705__(/*! ../internals/redefine */ \"./node_modules/core-js/internals/redefine.js\");\n                var setGlobal = __nested_webpack_require_113705__(/*! ../internals/set-global */ \"./node_modules/core-js/internals/set-global.js\");\n                var copyConstructorProperties = __nested_webpack_require_113705__(/*! ../internals/copy-constructor-properties */ \"./node_modules/core-js/internals/copy-constructor-properties.js\");\n                var isForced = __nested_webpack_require_113705__(/*! ../internals/is-forced */ \"./node_modules/core-js/internals/is-forced.js\");\n                /*\n  options.target      - name of the target object\n  options.global      - target is the global object\n  options.stat        - export as static methods of target\n  options.proto       - export as prototype methods of target\n  options.real        - real prototype method for the `pure` version\n  options.forced      - export even if the native feature is available\n  options.bind        - bind methods to the target, required for the `pure` version\n  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version\n  options.unsafe      - use the simple assignment of property instead of delete + defineProperty\n  options.sham        - add a flag to not completely full polyfills\n  options.enumerable  - export as enumerable property\n  options.noTargetGet - prevent calling a getter on target\n*/ module1.exports = function(options, source) {\n                    var TARGET = options.target;\n                    var GLOBAL = options.global;\n                    var STATIC = options.stat;\n                    var FORCED, target, key, targetProperty, sourceProperty, descriptor;\n                    if (GLOBAL) {\n                        target = global1;\n                    } else if (STATIC) {\n                        target = global1[TARGET] || setGlobal(TARGET, {});\n                    } else {\n                        target = (global1[TARGET] || {}).prototype;\n                    }\n                    if (target) for(key in source){\n                        sourceProperty = source[key];\n                        if (options.noTargetGet) {\n                            descriptor = getOwnPropertyDescriptor(target, key);\n                            targetProperty = descriptor && descriptor.value;\n                        } else targetProperty = target[key];\n                        FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? \".\" : \"#\") + key, options.forced);\n                        // contained in target\n                        if (!FORCED && targetProperty !== undefined) {\n                            if (typeof sourceProperty === typeof targetProperty) continue;\n                            copyConstructorProperties(sourceProperty, targetProperty);\n                        }\n                        // add a flag to not completely full polyfills\n                        if (options.sham || targetProperty && targetProperty.sham) {\n                            createNonEnumerableProperty(sourceProperty, \"sham\", true);\n                        }\n                        // extend global\n                        redefine(target, key, sourceProperty, options);\n                    }\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/fails.js\": /*!*************************************************!*\\\n  !*** ./node_modules/core-js/internals/fails.js ***!\n  \\*************************************************/ /***/ function(module1) {\n                module1.exports = function(exec) {\n                    try {\n                        return !!exec();\n                    } catch (error) {\n                        return true;\n                    }\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/function-bind-context.js\": /*!*****************************************************************!*\\\n  !*** ./node_modules/core-js/internals/function-bind-context.js ***!\n  \\*****************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_118366__) {\n                var aFunction = __nested_webpack_require_118366__(/*! ../internals/a-function */ \"./node_modules/core-js/internals/a-function.js\");\n                // optional / simple context binding\n                module1.exports = function(fn, that, length) {\n                    aFunction(fn);\n                    if (that === undefined) return fn;\n                    switch(length){\n                        case 0:\n                            return function() {\n                                return fn.call(that);\n                            };\n                        case 1:\n                            return function(a) {\n                                return fn.call(that, a);\n                            };\n                        case 2:\n                            return function(a, b) {\n                                return fn.call(that, a, b);\n                            };\n                        case 3:\n                            return function(a, b, c) {\n                                return fn.call(that, a, b, c);\n                            };\n                    }\n                    return function() {\n                        return fn.apply(that, arguments);\n                    };\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/get-built-in.js\": /*!********************************************************!*\\\n  !*** ./node_modules/core-js/internals/get-built-in.js ***!\n  \\********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_119943__) {\n                var global1 = __nested_webpack_require_119943__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var aFunction = function(variable) {\n                    return typeof variable == \"function\" ? variable : undefined;\n                };\n                module1.exports = function(namespace, method) {\n                    return arguments.length < 2 ? aFunction(global1[namespace]) : global1[namespace] && global1[namespace][method];\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/global.js\": /*!**************************************************!*\\\n  !*** ./node_modules/core-js/internals/global.js ***!\n  \\**************************************************/ /***/ function(module1) {\n                var check = function(it) {\n                    return it && it.Math == Math && it;\n                };\n                // https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\n                module1.exports = // eslint-disable-next-line es/no-global-this -- safe\n                check(typeof globalThis == \"object\" && globalThis) || check( false && 0) || // eslint-disable-next-line no-restricted-globals -- safe\n                check(typeof self == \"object\" && self) || check(typeof global == \"object\" && global) || // eslint-disable-next-line no-new-func -- fallback\n                function() {\n                    return this;\n                }() || Function(\"return this\")();\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/has.js\": /*!***********************************************!*\\\n  !*** ./node_modules/core-js/internals/has.js ***!\n  \\***********************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_121760__) {\n                var toObject = __nested_webpack_require_121760__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\n                var hasOwnProperty = {}.hasOwnProperty;\n                module1.exports = Object.hasOwn || function hasOwn(it, key) {\n                    return hasOwnProperty.call(toObject(it), key);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/hidden-keys.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/internals/hidden-keys.js ***!\n  \\*******************************************************/ /***/ function(module1) {\n                module1.exports = {};\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/html.js\": /*!************************************************!*\\\n  !*** ./node_modules/core-js/internals/html.js ***!\n  \\************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_122764__) {\n                var getBuiltIn = __nested_webpack_require_122764__(/*! ../internals/get-built-in */ \"./node_modules/core-js/internals/get-built-in.js\");\n                module1.exports = getBuiltIn(\"document\", \"documentElement\");\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/ie8-dom-define.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/internals/ie8-dom-define.js ***!\n  \\**********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_123337__) {\n                var DESCRIPTORS = __nested_webpack_require_123337__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var fails = __nested_webpack_require_123337__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var createElement = __nested_webpack_require_123337__(/*! ../internals/document-create-element */ \"./node_modules/core-js/internals/document-create-element.js\");\n                // Thank's IE8 for his funny defineProperty\n                module1.exports = !DESCRIPTORS && !fails(function() {\n                    // eslint-disable-next-line es/no-object-defineproperty -- requied for testing\n                    return Object.defineProperty(createElement(\"div\"), \"a\", {\n                        get: function() {\n                            return 7;\n                        }\n                    }).a != 7;\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/indexed-object.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/internals/indexed-object.js ***!\n  \\**********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_124580__) {\n                var fails = __nested_webpack_require_124580__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var classof = __nested_webpack_require_124580__(/*! ../internals/classof-raw */ \"./node_modules/core-js/internals/classof-raw.js\");\n                var split = \"\".split;\n                // fallback for non-array-like ES3 and non-enumerable old V8 strings\n                module1.exports = fails(function() {\n                    // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346\n                    // eslint-disable-next-line no-prototype-builtins -- safe\n                    return !Object(\"z\").propertyIsEnumerable(0);\n                }) ? function(it) {\n                    return classof(it) == \"String\" ? split.call(it, \"\") : Object(it);\n                } : Object;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/inherit-if-required.js\": /*!***************************************************************!*\\\n  !*** ./node_modules/core-js/internals/inherit-if-required.js ***!\n  \\***************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_125777__) {\n                var isObject = __nested_webpack_require_125777__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var setPrototypeOf = __nested_webpack_require_125777__(/*! ../internals/object-set-prototype-of */ \"./node_modules/core-js/internals/object-set-prototype-of.js\");\n                // makes subclassing work correct for wrapped built-ins\n                module1.exports = function($this, dummy, Wrapper) {\n                    var NewTarget, NewTargetPrototype;\n                    if (// it can work only with native `setPrototypeOf`\n                    setPrototypeOf && // we haven't completely correct pre-ES6 way for getting `new.target`, so use this\n                    typeof (NewTarget = dummy.constructor) == \"function\" && NewTarget !== Wrapper && isObject(NewTargetPrototype = NewTarget.prototype) && NewTargetPrototype !== Wrapper.prototype) setPrototypeOf($this, NewTargetPrototype);\n                    return $this;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/inspect-source.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/internals/inspect-source.js ***!\n  \\**********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_127112__) {\n                var store = __nested_webpack_require_127112__(/*! ../internals/shared-store */ \"./node_modules/core-js/internals/shared-store.js\");\n                var functionToString = Function.toString;\n                // this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper\n                if (typeof store.inspectSource != \"function\") {\n                    store.inspectSource = function(it) {\n                        return functionToString.call(it);\n                    };\n                }\n                module1.exports = store.inspectSource;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/internal-state.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/internals/internal-state.js ***!\n  \\**********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_128032__) {\n                var NATIVE_WEAK_MAP = __nested_webpack_require_128032__(/*! ../internals/native-weak-map */ \"./node_modules/core-js/internals/native-weak-map.js\");\n                var global1 = __nested_webpack_require_128032__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var isObject = __nested_webpack_require_128032__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var createNonEnumerableProperty = __nested_webpack_require_128032__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                var objectHas = __nested_webpack_require_128032__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var shared = __nested_webpack_require_128032__(/*! ../internals/shared-store */ \"./node_modules/core-js/internals/shared-store.js\");\n                var sharedKey = __nested_webpack_require_128032__(/*! ../internals/shared-key */ \"./node_modules/core-js/internals/shared-key.js\");\n                var hiddenKeys = __nested_webpack_require_128032__(/*! ../internals/hidden-keys */ \"./node_modules/core-js/internals/hidden-keys.js\");\n                var OBJECT_ALREADY_INITIALIZED = \"Object already initialized\";\n                var WeakMap = global1.WeakMap;\n                var set, get, has;\n                var enforce = function(it) {\n                    return has(it) ? get(it) : set(it, {});\n                };\n                var getterFor = function(TYPE) {\n                    return function(it) {\n                        var state;\n                        if (!isObject(it) || (state = get(it)).type !== TYPE) {\n                            throw TypeError(\"Incompatible receiver, \" + TYPE + \" required\");\n                        }\n                        return state;\n                    };\n                };\n                if (NATIVE_WEAK_MAP || shared.state) {\n                    var store = shared.state || (shared.state = new WeakMap());\n                    var wmget = store.get;\n                    var wmhas = store.has;\n                    var wmset = store.set;\n                    set = function(it, metadata) {\n                        if (wmhas.call(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n                        metadata.facade = it;\n                        wmset.call(store, it, metadata);\n                        return metadata;\n                    };\n                    get = function(it) {\n                        return wmget.call(store, it) || {};\n                    };\n                    has = function(it) {\n                        return wmhas.call(store, it);\n                    };\n                } else {\n                    var STATE = sharedKey(\"state\");\n                    hiddenKeys[STATE] = true;\n                    set = function(it, metadata) {\n                        if (objectHas(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);\n                        metadata.facade = it;\n                        createNonEnumerableProperty(it, STATE, metadata);\n                        return metadata;\n                    };\n                    get = function(it) {\n                        return objectHas(it, STATE) ? it[STATE] : {};\n                    };\n                    has = function(it) {\n                        return objectHas(it, STATE);\n                    };\n                }\n                module1.exports = {\n                    set: set,\n                    get: get,\n                    has: has,\n                    enforce: enforce,\n                    getterFor: getterFor\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/is-array.js\": /*!****************************************************!*\\\n  !*** ./node_modules/core-js/internals/is-array.js ***!\n  \\****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_131952__) {\n                var classof = __nested_webpack_require_131952__(/*! ../internals/classof-raw */ \"./node_modules/core-js/internals/classof-raw.js\");\n                // `IsArray` abstract operation\n                // https://tc39.es/ecma262/#sec-isarray\n                // eslint-disable-next-line es/no-array-isarray -- safe\n                module1.exports = Array.isArray || function isArray(arg) {\n                    return classof(arg) == \"Array\";\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/is-forced.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/is-forced.js ***!\n  \\*****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_132745__) {\n                var fails = __nested_webpack_require_132745__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var replacement = /#|\\.prototype\\./;\n                var isForced = function(feature, detection) {\n                    var value = data[normalize(feature)];\n                    return value == POLYFILL ? true : value == NATIVE ? false : typeof detection == \"function\" ? fails(detection) : !!detection;\n                };\n                var normalize = isForced.normalize = function(string) {\n                    return String(string).replace(replacement, \".\").toLowerCase();\n                };\n                var data = isForced.data = {};\n                var NATIVE = isForced.NATIVE = \"N\";\n                var POLYFILL = isForced.POLYFILL = \"P\";\n                module1.exports = isForced;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/is-object.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/is-object.js ***!\n  \\*****************************************************/ /***/ function(module1) {\n                module1.exports = function(it) {\n                    return typeof it === \"object\" ? it !== null : typeof it === \"function\";\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/is-pure.js\": /*!***************************************************!*\\\n  !*** ./node_modules/core-js/internals/is-pure.js ***!\n  \\***************************************************/ /***/ function(module1) {\n                module1.exports = false;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/is-symbol.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/is-symbol.js ***!\n  \\*****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_134685__) {\n                var getBuiltIn = __nested_webpack_require_134685__(/*! ../internals/get-built-in */ \"./node_modules/core-js/internals/get-built-in.js\");\n                var USE_SYMBOL_AS_UID = __nested_webpack_require_134685__(/*! ../internals/use-symbol-as-uid */ \"./node_modules/core-js/internals/use-symbol-as-uid.js\");\n                module1.exports = USE_SYMBOL_AS_UID ? function(it) {\n                    return typeof it == \"symbol\";\n                } : function(it) {\n                    var $Symbol = getBuiltIn(\"Symbol\");\n                    return typeof $Symbol == \"function\" && Object(it) instanceof $Symbol;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/iterators-core.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/internals/iterators-core.js ***!\n  \\**********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_135656__) {\n                \"use strict\";\n                var fails = __nested_webpack_require_135656__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var getPrototypeOf = __nested_webpack_require_135656__(/*! ../internals/object-get-prototype-of */ \"./node_modules/core-js/internals/object-get-prototype-of.js\");\n                var createNonEnumerableProperty = __nested_webpack_require_135656__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                var has = __nested_webpack_require_135656__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var wellKnownSymbol = __nested_webpack_require_135656__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var IS_PURE = __nested_webpack_require_135656__(/*! ../internals/is-pure */ \"./node_modules/core-js/internals/is-pure.js\");\n                var ITERATOR = wellKnownSymbol(\"iterator\");\n                var BUGGY_SAFARI_ITERATORS = false;\n                var returnThis = function() {\n                    return this;\n                };\n                // `%IteratorPrototype%` object\n                // https://tc39.es/ecma262/#sec-%iteratorprototype%-object\n                var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;\n                /* eslint-disable es/no-array-prototype-keys -- safe */ if ([].keys) {\n                    arrayIterator = [].keys();\n                    // Safari 8 has buggy iterators w/o `next`\n                    if (!(\"next\" in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;\n                    else {\n                        PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));\n                        if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;\n                    }\n                }\n                var NEW_ITERATOR_PROTOTYPE = IteratorPrototype == undefined || fails(function() {\n                    var test = {};\n                    // FF44- legacy iterators case\n                    return IteratorPrototype[ITERATOR].call(test) !== test;\n                });\n                if (NEW_ITERATOR_PROTOTYPE) IteratorPrototype = {};\n                // `%IteratorPrototype%[@@iterator]()` method\n                // https://tc39.es/ecma262/#sec-%iteratorprototype%-@@iterator\n                if ((!IS_PURE || NEW_ITERATOR_PROTOTYPE) && !has(IteratorPrototype, ITERATOR)) {\n                    createNonEnumerableProperty(IteratorPrototype, ITERATOR, returnThis);\n                }\n                module1.exports = {\n                    IteratorPrototype: IteratorPrototype,\n                    BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/iterators.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/iterators.js ***!\n  \\*****************************************************/ /***/ function(module1) {\n                module1.exports = {};\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/native-symbol.js\": /*!*********************************************************!*\\\n  !*** ./node_modules/core-js/internals/native-symbol.js ***!\n  \\*********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_139127__) {\n                /* eslint-disable es/no-symbol -- required for testing */ var V8_VERSION = __nested_webpack_require_139127__(/*! ../internals/engine-v8-version */ \"./node_modules/core-js/internals/engine-v8-version.js\");\n                var fails = __nested_webpack_require_139127__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                // eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing\n                module1.exports = !!Object.getOwnPropertySymbols && !fails(function() {\n                    var symbol = Symbol();\n                    // Chrome 38 Symbol has incorrect toString conversion\n                    // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances\n                    return !String(symbol) || !(Object(symbol) instanceof Symbol) || // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances\n                    !Symbol.sham && V8_VERSION && V8_VERSION < 41;\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/native-weak-map.js\": /*!***********************************************************!*\\\n  !*** ./node_modules/core-js/internals/native-weak-map.js ***!\n  \\***********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_140494__) {\n                var global1 = __nested_webpack_require_140494__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var inspectSource = __nested_webpack_require_140494__(/*! ../internals/inspect-source */ \"./node_modules/core-js/internals/inspect-source.js\");\n                var WeakMap = global1.WeakMap;\n                module1.exports = typeof WeakMap === \"function\" && /native code/.test(inspectSource(WeakMap));\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-assign.js\": /*!*********************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-assign.js ***!\n  \\*********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_141275__) {\n                \"use strict\";\n                var DESCRIPTORS = __nested_webpack_require_141275__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var fails = __nested_webpack_require_141275__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var objectKeys = __nested_webpack_require_141275__(/*! ../internals/object-keys */ \"./node_modules/core-js/internals/object-keys.js\");\n                var getOwnPropertySymbolsModule = __nested_webpack_require_141275__(/*! ../internals/object-get-own-property-symbols */ \"./node_modules/core-js/internals/object-get-own-property-symbols.js\");\n                var propertyIsEnumerableModule = __nested_webpack_require_141275__(/*! ../internals/object-property-is-enumerable */ \"./node_modules/core-js/internals/object-property-is-enumerable.js\");\n                var toObject = __nested_webpack_require_141275__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\n                var IndexedObject = __nested_webpack_require_141275__(/*! ../internals/indexed-object */ \"./node_modules/core-js/internals/indexed-object.js\");\n                // eslint-disable-next-line es/no-object-assign -- safe\n                var $assign = Object.assign;\n                // eslint-disable-next-line es/no-object-defineproperty -- required for testing\n                var defineProperty = Object.defineProperty;\n                // `Object.assign` method\n                // https://tc39.es/ecma262/#sec-object.assign\n                module1.exports = !$assign || fails(function() {\n                    // should have correct order of operations (Edge bug)\n                    if (DESCRIPTORS && $assign({\n                        b: 1\n                    }, $assign(defineProperty({}, \"a\", {\n                        enumerable: true,\n                        get: function() {\n                            defineProperty(this, \"b\", {\n                                value: 3,\n                                enumerable: false\n                            });\n                        }\n                    }), {\n                        b: 2\n                    })).b !== 1) return true;\n                    // should work with symbols and should have deterministic property order (V8 bug)\n                    var A = {};\n                    var B = {};\n                    // eslint-disable-next-line es/no-symbol -- safe\n                    var symbol = Symbol();\n                    var alphabet = \"abcdefghijklmnopqrst\";\n                    A[symbol] = 7;\n                    alphabet.split(\"\").forEach(function(chr) {\n                        B[chr] = chr;\n                    });\n                    return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join(\"\") != alphabet;\n                }) ? function assign(target, source) {\n                    var T = toObject(target);\n                    var argumentsLength = arguments.length;\n                    var index = 1;\n                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n                    var propertyIsEnumerable = propertyIsEnumerableModule.f;\n                    while(argumentsLength > index){\n                        var S = IndexedObject(arguments[index++]);\n                        var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);\n                        var length = keys.length;\n                        var j = 0;\n                        var key;\n                        while(length > j){\n                            key = keys[j++];\n                            if (!DESCRIPTORS || propertyIsEnumerable.call(S, key)) T[key] = S[key];\n                        }\n                    }\n                    return T;\n                } : $assign;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-create.js\": /*!*********************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-create.js ***!\n  \\*********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_145366__) {\n                /* global ActiveXObject -- old IE, WSH */ var anObject = __nested_webpack_require_145366__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                var defineProperties = __nested_webpack_require_145366__(/*! ../internals/object-define-properties */ \"./node_modules/core-js/internals/object-define-properties.js\");\n                var enumBugKeys = __nested_webpack_require_145366__(/*! ../internals/enum-bug-keys */ \"./node_modules/core-js/internals/enum-bug-keys.js\");\n                var hiddenKeys = __nested_webpack_require_145366__(/*! ../internals/hidden-keys */ \"./node_modules/core-js/internals/hidden-keys.js\");\n                var html = __nested_webpack_require_145366__(/*! ../internals/html */ \"./node_modules/core-js/internals/html.js\");\n                var documentCreateElement = __nested_webpack_require_145366__(/*! ../internals/document-create-element */ \"./node_modules/core-js/internals/document-create-element.js\");\n                var sharedKey = __nested_webpack_require_145366__(/*! ../internals/shared-key */ \"./node_modules/core-js/internals/shared-key.js\");\n                var GT = \">\";\n                var LT = \"<\";\n                var PROTOTYPE = \"prototype\";\n                var SCRIPT = \"script\";\n                var IE_PROTO = sharedKey(\"IE_PROTO\");\n                var EmptyConstructor = function() {};\n                var scriptTag = function(content) {\n                    return LT + SCRIPT + GT + content + LT + \"/\" + SCRIPT + GT;\n                };\n                // Create object with fake `null` prototype: use ActiveX Object with cleared prototype\n                var NullProtoObjectViaActiveX = function(activeXDocument) {\n                    activeXDocument.write(scriptTag(\"\"));\n                    activeXDocument.close();\n                    var temp = activeXDocument.parentWindow.Object;\n                    activeXDocument = null; // avoid memory leak\n                    return temp;\n                };\n                // Create object with fake `null` prototype: use iframe Object with cleared prototype\n                var NullProtoObjectViaIFrame = function() {\n                    // Thrash, waste and sodomy: IE GC bug\n                    var iframe = documentCreateElement(\"iframe\");\n                    var JS = \"java\" + SCRIPT + \":\";\n                    var iframeDocument;\n                    if (iframe.style) {\n                        iframe.style.display = \"none\";\n                        html.appendChild(iframe);\n                        // https://github.com/zloirock/core-js/issues/475\n                        iframe.src = String(JS);\n                        iframeDocument = iframe.contentWindow.document;\n                        iframeDocument.open();\n                        iframeDocument.write(scriptTag(\"document.F=Object\"));\n                        iframeDocument.close();\n                        return iframeDocument.F;\n                    }\n                };\n                // Check for document.domain and active x support\n                // No need to use active x approach when document.domain is not set\n                // see https://github.com/es-shims/es5-shim/issues/150\n                // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346\n                // avoid IE GC bug\n                var activeXDocument;\n                var NullProtoObject = function() {\n                    try {\n                        activeXDocument = new ActiveXObject(\"htmlfile\");\n                    } catch (error) {}\n                    NullProtoObject = document.domain && activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame() || NullProtoObjectViaActiveX(activeXDocument); // WSH\n                    var length = enumBugKeys.length;\n                    while(length--)delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];\n                    return NullProtoObject();\n                };\n                hiddenKeys[IE_PROTO] = true;\n                // `Object.create` method\n                // https://tc39.es/ecma262/#sec-object.create\n                module1.exports = Object.create || function create(O, Properties) {\n                    var result;\n                    if (O !== null) {\n                        EmptyConstructor[PROTOTYPE] = anObject(O);\n                        result = new EmptyConstructor();\n                        EmptyConstructor[PROTOTYPE] = null;\n                        // add \"__proto__\" for Object.getPrototypeOf polyfill\n                        result[IE_PROTO] = O;\n                    } else result = NullProtoObject();\n                    return Properties === undefined ? result : defineProperties(result, Properties);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-define-properties.js\": /*!********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-define-properties.js ***!\n  \\********************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_150431__) {\n                var DESCRIPTORS = __nested_webpack_require_150431__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var definePropertyModule = __nested_webpack_require_150431__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\");\n                var anObject = __nested_webpack_require_150431__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                var objectKeys = __nested_webpack_require_150431__(/*! ../internals/object-keys */ \"./node_modules/core-js/internals/object-keys.js\");\n                // `Object.defineProperties` method\n                // https://tc39.es/ecma262/#sec-object.defineproperties\n                // eslint-disable-next-line es/no-object-defineproperties -- safe\n                module1.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {\n                    anObject(O);\n                    var keys = objectKeys(Properties);\n                    var length = keys.length;\n                    var index = 0;\n                    var key;\n                    while(length > index)definePropertyModule.f(O, key = keys[index++], Properties[key]);\n                    return O;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-define-property.js\": /*!******************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-define-property.js ***!\n  \\******************************************************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_152071__) {\n                var DESCRIPTORS = __nested_webpack_require_152071__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var IE8_DOM_DEFINE = __nested_webpack_require_152071__(/*! ../internals/ie8-dom-define */ \"./node_modules/core-js/internals/ie8-dom-define.js\");\n                var anObject = __nested_webpack_require_152071__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                var toPropertyKey = __nested_webpack_require_152071__(/*! ../internals/to-property-key */ \"./node_modules/core-js/internals/to-property-key.js\");\n                // eslint-disable-next-line es/no-object-defineproperty -- safe\n                var $defineProperty = Object.defineProperty;\n                // `Object.defineProperty` method\n                // https://tc39.es/ecma262/#sec-object.defineproperty\n                exports1.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {\n                    anObject(O);\n                    P = toPropertyKey(P);\n                    anObject(Attributes);\n                    if (IE8_DOM_DEFINE) try {\n                        return $defineProperty(O, P, Attributes);\n                    } catch (error) {}\n                    if (\"get\" in Attributes || \"set\" in Attributes) throw TypeError(\"Accessors not supported\");\n                    if (\"value\" in Attributes) O[P] = Attributes.value;\n                    return O;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-get-own-property-descriptor.js\": /*!******************************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-get-own-property-descriptor.js ***!\n  \\******************************************************************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_153939__) {\n                var DESCRIPTORS = __nested_webpack_require_153939__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var propertyIsEnumerableModule = __nested_webpack_require_153939__(/*! ../internals/object-property-is-enumerable */ \"./node_modules/core-js/internals/object-property-is-enumerable.js\");\n                var createPropertyDescriptor = __nested_webpack_require_153939__(/*! ../internals/create-property-descriptor */ \"./node_modules/core-js/internals/create-property-descriptor.js\");\n                var toIndexedObject = __nested_webpack_require_153939__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var toPropertyKey = __nested_webpack_require_153939__(/*! ../internals/to-property-key */ \"./node_modules/core-js/internals/to-property-key.js\");\n                var has = __nested_webpack_require_153939__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var IE8_DOM_DEFINE = __nested_webpack_require_153939__(/*! ../internals/ie8-dom-define */ \"./node_modules/core-js/internals/ie8-dom-define.js\");\n                // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n                var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n                // `Object.getOwnPropertyDescriptor` method\n                // https://tc39.es/ecma262/#sec-object.getownpropertydescriptor\n                exports1.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {\n                    O = toIndexedObject(O);\n                    P = toPropertyKey(P);\n                    if (IE8_DOM_DEFINE) try {\n                        return $getOwnPropertyDescriptor(O, P);\n                    } catch (error) {}\n                    if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-get-own-property-names-external.js\": /*!**********************************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-get-own-property-names-external.js ***!\n  \\**********************************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_156257__) {\n                /* eslint-disable es/no-object-getownpropertynames -- safe */ var toIndexedObject = __nested_webpack_require_156257__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var $getOwnPropertyNames = __nested_webpack_require_156257__(/*! ../internals/object-get-own-property-names */ \"./node_modules/core-js/internals/object-get-own-property-names.js\").f;\n                var toString = {}.toString;\n                var windowNames =  false ? 0 : [];\n                var getWindowNames = function(it) {\n                    try {\n                        return $getOwnPropertyNames(it);\n                    } catch (error) {\n                        return windowNames.slice();\n                    }\n                };\n                // fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\n                module1.exports.f = function getOwnPropertyNames(it) {\n                    return windowNames && toString.call(it) == \"[object Window]\" ? getWindowNames(it) : $getOwnPropertyNames(toIndexedObject(it));\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-get-own-property-names.js\": /*!*************************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-get-own-property-names.js ***!\n  \\*************************************************************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_157856__) {\n                var internalObjectKeys = __nested_webpack_require_157856__(/*! ../internals/object-keys-internal */ \"./node_modules/core-js/internals/object-keys-internal.js\");\n                var enumBugKeys = __nested_webpack_require_157856__(/*! ../internals/enum-bug-keys */ \"./node_modules/core-js/internals/enum-bug-keys.js\");\n                var hiddenKeys = enumBugKeys.concat(\"length\", \"prototype\");\n                // `Object.getOwnPropertyNames` method\n                // https://tc39.es/ecma262/#sec-object.getownpropertynames\n                // eslint-disable-next-line es/no-object-getownpropertynames -- safe\n                exports1.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n                    return internalObjectKeys(O, hiddenKeys);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-get-own-property-symbols.js\": /*!***************************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-get-own-property-symbols.js ***!\n  \\***************************************************************************/ /***/ function(__unused_webpack_module, exports1) {\n                // eslint-disable-next-line es/no-object-getownpropertysymbols -- safe\n                exports1.f = Object.getOwnPropertySymbols;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-get-prototype-of.js\": /*!*******************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-get-prototype-of.js ***!\n  \\*******************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_159569__) {\n                var has = __nested_webpack_require_159569__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var toObject = __nested_webpack_require_159569__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\n                var sharedKey = __nested_webpack_require_159569__(/*! ../internals/shared-key */ \"./node_modules/core-js/internals/shared-key.js\");\n                var CORRECT_PROTOTYPE_GETTER = __nested_webpack_require_159569__(/*! ../internals/correct-prototype-getter */ \"./node_modules/core-js/internals/correct-prototype-getter.js\");\n                var IE_PROTO = sharedKey(\"IE_PROTO\");\n                var ObjectPrototype = Object.prototype;\n                // `Object.getPrototypeOf` method\n                // https://tc39.es/ecma262/#sec-object.getprototypeof\n                // eslint-disable-next-line es/no-object-getprototypeof -- safe\n                module1.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function(O) {\n                    O = toObject(O);\n                    if (has(O, IE_PROTO)) return O[IE_PROTO];\n                    if (typeof O.constructor == \"function\" && O instanceof O.constructor) {\n                        return O.constructor.prototype;\n                    }\n                    return O instanceof Object ? ObjectPrototype : null;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-keys-internal.js\": /*!****************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-keys-internal.js ***!\n  \\****************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_161276__) {\n                var has = __nested_webpack_require_161276__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var toIndexedObject = __nested_webpack_require_161276__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var indexOf = __nested_webpack_require_161276__(/*! ../internals/array-includes */ \"./node_modules/core-js/internals/array-includes.js\").indexOf;\n                var hiddenKeys = __nested_webpack_require_161276__(/*! ../internals/hidden-keys */ \"./node_modules/core-js/internals/hidden-keys.js\");\n                module1.exports = function(object, names) {\n                    var O = toIndexedObject(object);\n                    var i = 0;\n                    var result = [];\n                    var key;\n                    for(key in O)!has(hiddenKeys, key) && has(O, key) && result.push(key);\n                    // Don't enum bug & hidden keys\n                    while(names.length > i)if (has(O, key = names[i++])) {\n                        ~indexOf(result, key) || result.push(key);\n                    }\n                    return result;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-keys.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-keys.js ***!\n  \\*******************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_162745__) {\n                var internalObjectKeys = __nested_webpack_require_162745__(/*! ../internals/object-keys-internal */ \"./node_modules/core-js/internals/object-keys-internal.js\");\n                var enumBugKeys = __nested_webpack_require_162745__(/*! ../internals/enum-bug-keys */ \"./node_modules/core-js/internals/enum-bug-keys.js\");\n                // `Object.keys` method\n                // https://tc39.es/ecma262/#sec-object.keys\n                // eslint-disable-next-line es/no-object-keys -- safe\n                module1.exports = Object.keys || function keys(O) {\n                    return internalObjectKeys(O, enumBugKeys);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-property-is-enumerable.js\": /*!*************************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-property-is-enumerable.js ***!\n  \\*************************************************************************/ /***/ function(__unused_webpack_module, exports1) {\n                \"use strict\";\n                var $propertyIsEnumerable = {}.propertyIsEnumerable;\n                // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n                var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;\n                // Nashorn ~ JDK8 bug\n                var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({\n                    1: 2\n                }, 1);\n                // `Object.prototype.propertyIsEnumerable` method implementation\n                // https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable\n                exports1.f = NASHORN_BUG ? function propertyIsEnumerable(V) {\n                    var descriptor = getOwnPropertyDescriptor(this, V);\n                    return !!descriptor && descriptor.enumerable;\n                } : $propertyIsEnumerable;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-set-prototype-of.js\": /*!*******************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-set-prototype-of.js ***!\n  \\*******************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_165032__) {\n                /* eslint-disable no-proto -- safe */ var anObject = __nested_webpack_require_165032__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                var aPossiblePrototype = __nested_webpack_require_165032__(/*! ../internals/a-possible-prototype */ \"./node_modules/core-js/internals/a-possible-prototype.js\");\n                // `Object.setPrototypeOf` method\n                // https://tc39.es/ecma262/#sec-object.setprototypeof\n                // Works with __proto__ only. Old v8 can't work with null proto objects.\n                // eslint-disable-next-line es/no-object-setprototypeof -- safe\n                module1.exports = Object.setPrototypeOf || (\"__proto__\" in {} ? function() {\n                    var CORRECT_SETTER = false;\n                    var test = {};\n                    var setter;\n                    try {\n                        // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n                        setter = Object.getOwnPropertyDescriptor(Object.prototype, \"__proto__\").set;\n                        setter.call(test, []);\n                        CORRECT_SETTER = test instanceof Array;\n                    } catch (error) {}\n                    return function setPrototypeOf(O, proto) {\n                        anObject(O);\n                        aPossiblePrototype(proto);\n                        if (CORRECT_SETTER) setter.call(O, proto);\n                        else O.__proto__ = proto;\n                        return O;\n                    };\n                }() : undefined);\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/object-to-string.js\": /*!************************************************************!*\\\n  !*** ./node_modules/core-js/internals/object-to-string.js ***!\n  \\************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_166960__) {\n                \"use strict\";\n                var TO_STRING_TAG_SUPPORT = __nested_webpack_require_166960__(/*! ../internals/to-string-tag-support */ \"./node_modules/core-js/internals/to-string-tag-support.js\");\n                var classof = __nested_webpack_require_166960__(/*! ../internals/classof */ \"./node_modules/core-js/internals/classof.js\");\n                // `Object.prototype.toString` method implementation\n                // https://tc39.es/ecma262/#sec-object.prototype.tostring\n                module1.exports = TO_STRING_TAG_SUPPORT ? ({}).toString : function toString() {\n                    return \"[object \" + classof(this) + \"]\";\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/ordinary-to-primitive.js\": /*!*****************************************************************!*\\\n  !*** ./node_modules/core-js/internals/ordinary-to-primitive.js ***!\n  \\*****************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_167988__) {\n                var isObject = __nested_webpack_require_167988__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                // `OrdinaryToPrimitive` abstract operation\n                // https://tc39.es/ecma262/#sec-ordinarytoprimitive\n                module1.exports = function(input, pref) {\n                    var fn, val;\n                    if (pref === \"string\" && typeof (fn = input.toString) == \"function\" && !isObject(val = fn.call(input))) return val;\n                    if (typeof (fn = input.valueOf) == \"function\" && !isObject(val = fn.call(input))) return val;\n                    if (pref !== \"string\" && typeof (fn = input.toString) == \"function\" && !isObject(val = fn.call(input))) return val;\n                    throw TypeError(\"Can't convert object to primitive value\");\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/own-keys.js\": /*!****************************************************!*\\\n  !*** ./node_modules/core-js/internals/own-keys.js ***!\n  \\****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_169156__) {\n                var getBuiltIn = __nested_webpack_require_169156__(/*! ../internals/get-built-in */ \"./node_modules/core-js/internals/get-built-in.js\");\n                var getOwnPropertyNamesModule = __nested_webpack_require_169156__(/*! ../internals/object-get-own-property-names */ \"./node_modules/core-js/internals/object-get-own-property-names.js\");\n                var getOwnPropertySymbolsModule = __nested_webpack_require_169156__(/*! ../internals/object-get-own-property-symbols */ \"./node_modules/core-js/internals/object-get-own-property-symbols.js\");\n                var anObject = __nested_webpack_require_169156__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                // all object keys, includes non-enumerable and symbols\n                module1.exports = getBuiltIn(\"Reflect\", \"ownKeys\") || function ownKeys(it) {\n                    var keys = getOwnPropertyNamesModule.f(anObject(it));\n                    var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;\n                    return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/path.js\": /*!************************************************!*\\\n  !*** ./node_modules/core-js/internals/path.js ***!\n  \\************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_170560__) {\n                var global1 = __nested_webpack_require_170560__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                module1.exports = global1;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/redefine.js\": /*!****************************************************!*\\\n  !*** ./node_modules/core-js/internals/redefine.js ***!\n  \\****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_171060__) {\n                var global1 = __nested_webpack_require_171060__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var createNonEnumerableProperty = __nested_webpack_require_171060__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                var has = __nested_webpack_require_171060__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var setGlobal = __nested_webpack_require_171060__(/*! ../internals/set-global */ \"./node_modules/core-js/internals/set-global.js\");\n                var inspectSource = __nested_webpack_require_171060__(/*! ../internals/inspect-source */ \"./node_modules/core-js/internals/inspect-source.js\");\n                var InternalStateModule = __nested_webpack_require_171060__(/*! ../internals/internal-state */ \"./node_modules/core-js/internals/internal-state.js\");\n                var getInternalState = InternalStateModule.get;\n                var enforceInternalState = InternalStateModule.enforce;\n                var TEMPLATE = String(String).split(\"String\");\n                (module1.exports = function(O, key, value, options) {\n                    var unsafe = options ? !!options.unsafe : false;\n                    var simple = options ? !!options.enumerable : false;\n                    var noTargetGet = options ? !!options.noTargetGet : false;\n                    var state;\n                    if (typeof value == \"function\") {\n                        if (typeof key == \"string\" && !has(value, \"name\")) {\n                            createNonEnumerableProperty(value, \"name\", key);\n                        }\n                        state = enforceInternalState(value);\n                        if (!state.source) {\n                            state.source = TEMPLATE.join(typeof key == \"string\" ? key : \"\");\n                        }\n                    }\n                    if (O === global1) {\n                        if (simple) O[key] = value;\n                        else setGlobal(key, value);\n                        return;\n                    } else if (!unsafe) {\n                        delete O[key];\n                    } else if (!noTargetGet && O[key]) {\n                        simple = true;\n                    }\n                    if (simple) O[key] = value;\n                    else createNonEnumerableProperty(O, key, value);\n                // add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n                })(Function.prototype, \"toString\", function toString() {\n                    return typeof this == \"function\" && getInternalState(this).source || inspectSource(this);\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/regexp-flags.js\": /*!********************************************************!*\\\n  !*** ./node_modules/core-js/internals/regexp-flags.js ***!\n  \\********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_174097__) {\n                \"use strict\";\n                var anObject = __nested_webpack_require_174097__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                // `RegExp.prototype.flags` getter implementation\n                // https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\n                module1.exports = function() {\n                    var that = anObject(this);\n                    var result = \"\";\n                    if (that.global) result += \"g\";\n                    if (that.ignoreCase) result += \"i\";\n                    if (that.multiline) result += \"m\";\n                    if (that.dotAll) result += \"s\";\n                    if (that.unicode) result += \"u\";\n                    if (that.sticky) result += \"y\";\n                    return result;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/require-object-coercible.js\": /*!********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/require-object-coercible.js ***!\n  \\********************************************************************/ /***/ function(module1) {\n                // `RequireObjectCoercible` abstract operation\n                // https://tc39.es/ecma262/#sec-requireobjectcoercible\n                module1.exports = function(it) {\n                    if (it == undefined) throw TypeError(\"Can't call method on \" + it);\n                    return it;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/set-global.js\": /*!******************************************************!*\\\n  !*** ./node_modules/core-js/internals/set-global.js ***!\n  \\******************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_175916__) {\n                var global1 = __nested_webpack_require_175916__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                module1.exports = function(key, value) {\n                    try {\n                        // eslint-disable-next-line es/no-object-defineproperty -- safe\n                        Object.defineProperty(global1, key, {\n                            value: value,\n                            configurable: true,\n                            writable: true\n                        });\n                    } catch (error) {\n                        global1[key] = value;\n                    }\n                    return value;\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/set-to-string-tag.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/internals/set-to-string-tag.js ***!\n  \\*************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_176962__) {\n                var defineProperty = __nested_webpack_require_176962__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\").f;\n                var has = __nested_webpack_require_176962__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var wellKnownSymbol = __nested_webpack_require_176962__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var TO_STRING_TAG = wellKnownSymbol(\"toStringTag\");\n                module1.exports = function(it, TAG, STATIC) {\n                    if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {\n                        defineProperty(it, TO_STRING_TAG, {\n                            configurable: true,\n                            value: TAG\n                        });\n                    }\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/shared-key.js\": /*!******************************************************!*\\\n  !*** ./node_modules/core-js/internals/shared-key.js ***!\n  \\******************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_178168__) {\n                var shared = __nested_webpack_require_178168__(/*! ../internals/shared */ \"./node_modules/core-js/internals/shared.js\");\n                var uid = __nested_webpack_require_178168__(/*! ../internals/uid */ \"./node_modules/core-js/internals/uid.js\");\n                var keys = shared(\"keys\");\n                module1.exports = function(key) {\n                    return keys[key] || (keys[key] = uid(key));\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/shared-store.js\": /*!********************************************************!*\\\n  !*** ./node_modules/core-js/internals/shared-store.js ***!\n  \\********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_178930__) {\n                var global1 = __nested_webpack_require_178930__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var setGlobal = __nested_webpack_require_178930__(/*! ../internals/set-global */ \"./node_modules/core-js/internals/set-global.js\");\n                var SHARED = \"__core-js_shared__\";\n                var store = global1[SHARED] || setGlobal(SHARED, {});\n                module1.exports = store;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/shared.js\": /*!**************************************************!*\\\n  !*** ./node_modules/core-js/internals/shared.js ***!\n  \\**************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_179675__) {\n                var IS_PURE = __nested_webpack_require_179675__(/*! ../internals/is-pure */ \"./node_modules/core-js/internals/is-pure.js\");\n                var store = __nested_webpack_require_179675__(/*! ../internals/shared-store */ \"./node_modules/core-js/internals/shared-store.js\");\n                (module1.exports = function(key, value) {\n                    return store[key] || (store[key] = value !== undefined ? value : {});\n                })(\"versions\", []).push({\n                    version: \"3.16.0\",\n                    mode: IS_PURE ? \"pure\" : \"global\",\n                    copyright: \"\\xa9 2021 Denis Pushkarev (zloirock.ru)\"\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/string-html-forced.js\": /*!**************************************************************!*\\\n  !*** ./node_modules/core-js/internals/string-html-forced.js ***!\n  \\**************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_180685__) {\n                var fails = __nested_webpack_require_180685__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                // check the existence of a method, lowercase\n                // of a tag and escaping quotes in arguments\n                module1.exports = function(METHOD_NAME) {\n                    return fails(function() {\n                        var test = \"\"[METHOD_NAME]('\"');\n                        return test !== test.toLowerCase() || test.split('\"').length > 3;\n                    });\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/string-multibyte.js\": /*!************************************************************!*\\\n  !*** ./node_modules/core-js/internals/string-multibyte.js ***!\n  \\************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_181587__) {\n                var toInteger = __nested_webpack_require_181587__(/*! ../internals/to-integer */ \"./node_modules/core-js/internals/to-integer.js\");\n                var toString = __nested_webpack_require_181587__(/*! ../internals/to-string */ \"./node_modules/core-js/internals/to-string.js\");\n                var requireObjectCoercible = __nested_webpack_require_181587__(/*! ../internals/require-object-coercible */ \"./node_modules/core-js/internals/require-object-coercible.js\");\n                // `String.prototype.codePointAt` methods implementation\n                var createMethod = function(CONVERT_TO_STRING) {\n                    return function($this, pos) {\n                        var S = toString(requireObjectCoercible($this));\n                        var position = toInteger(pos);\n                        var size = S.length;\n                        var first, second;\n                        if (position < 0 || position >= size) return CONVERT_TO_STRING ? \"\" : undefined;\n                        first = S.charCodeAt(position);\n                        return first < 0xD800 || first > 0xDBFF || position + 1 === size || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF ? CONVERT_TO_STRING ? S.charAt(position) : first : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;\n                    };\n                };\n                module1.exports = {\n                    // `String.prototype.codePointAt` method\n                    // https://tc39.es/ecma262/#sec-string.prototype.codepointat\n                    codeAt: createMethod(false),\n                    // `String.prototype.at` method\n                    // https://github.com/mathiasbynens/String.prototype.at\n                    charAt: createMethod(true)\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/string-trim.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/internals/string-trim.js ***!\n  \\*******************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_183717__) {\n                var requireObjectCoercible = __nested_webpack_require_183717__(/*! ../internals/require-object-coercible */ \"./node_modules/core-js/internals/require-object-coercible.js\");\n                var toString = __nested_webpack_require_183717__(/*! ../internals/to-string */ \"./node_modules/core-js/internals/to-string.js\");\n                var whitespaces = __nested_webpack_require_183717__(/*! ../internals/whitespaces */ \"./node_modules/core-js/internals/whitespaces.js\");\n                var whitespace = \"[\" + whitespaces + \"]\";\n                var ltrim = RegExp(\"^\" + whitespace + whitespace + \"*\");\n                var rtrim = RegExp(whitespace + whitespace + \"*$\");\n                // `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\n                var createMethod = function(TYPE) {\n                    return function($this) {\n                        var string = toString(requireObjectCoercible($this));\n                        if (TYPE & 1) string = string.replace(ltrim, \"\");\n                        if (TYPE & 2) string = string.replace(rtrim, \"\");\n                        return string;\n                    };\n                };\n                module1.exports = {\n                    // `String.prototype.{ trimLeft, trimStart }` methods\n                    // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n                    start: createMethod(1),\n                    // `String.prototype.{ trimRight, trimEnd }` methods\n                    // https://tc39.es/ecma262/#sec-string.prototype.trimend\n                    end: createMethod(2),\n                    // `String.prototype.trim` method\n                    // https://tc39.es/ecma262/#sec-string.prototype.trim\n                    trim: createMethod(3)\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-absolute-index.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-absolute-index.js ***!\n  \\*************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_185858__) {\n                var toInteger = __nested_webpack_require_185858__(/*! ../internals/to-integer */ \"./node_modules/core-js/internals/to-integer.js\");\n                var max = Math.max;\n                var min = Math.min;\n                // Helper for a popular repeating case of the spec:\n                // Let integer be ? ToInteger(index).\n                // If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).\n                module1.exports = function(index, length) {\n                    var integer = toInteger(index);\n                    return integer < 0 ? max(integer + length, 0) : min(integer, length);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-indexed-object.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-indexed-object.js ***!\n  \\*************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_186894__) {\n                // toObject with fallback for non-array-like ES3 strings\n                var IndexedObject = __nested_webpack_require_186894__(/*! ../internals/indexed-object */ \"./node_modules/core-js/internals/indexed-object.js\");\n                var requireObjectCoercible = __nested_webpack_require_186894__(/*! ../internals/require-object-coercible */ \"./node_modules/core-js/internals/require-object-coercible.js\");\n                module1.exports = function(it) {\n                    return IndexedObject(requireObjectCoercible(it));\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-integer.js\": /*!******************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-integer.js ***!\n  \\******************************************************/ /***/ function(module1) {\n                var ceil = Math.ceil;\n                var floor = Math.floor;\n                // `ToInteger` abstract operation\n                // https://tc39.es/ecma262/#sec-tointeger\n                module1.exports = function(argument) {\n                    return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-length.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-length.js ***!\n  \\*****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_188419__) {\n                var toInteger = __nested_webpack_require_188419__(/*! ../internals/to-integer */ \"./node_modules/core-js/internals/to-integer.js\");\n                var min = Math.min;\n                // `ToLength` abstract operation\n                // https://tc39.es/ecma262/#sec-tolength\n                module1.exports = function(argument) {\n                    return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-object.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-object.js ***!\n  \\*****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_189231__) {\n                var requireObjectCoercible = __nested_webpack_require_189231__(/*! ../internals/require-object-coercible */ \"./node_modules/core-js/internals/require-object-coercible.js\");\n                // `ToObject` abstract operation\n                // https://tc39.es/ecma262/#sec-toobject\n                module1.exports = function(argument) {\n                    return Object(requireObjectCoercible(argument));\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-primitive.js\": /*!********************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-primitive.js ***!\n  \\********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_190004__) {\n                var isObject = __nested_webpack_require_190004__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var isSymbol = __nested_webpack_require_190004__(/*! ../internals/is-symbol */ \"./node_modules/core-js/internals/is-symbol.js\");\n                var ordinaryToPrimitive = __nested_webpack_require_190004__(/*! ../internals/ordinary-to-primitive */ \"./node_modules/core-js/internals/ordinary-to-primitive.js\");\n                var wellKnownSymbol = __nested_webpack_require_190004__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var TO_PRIMITIVE = wellKnownSymbol(\"toPrimitive\");\n                // `ToPrimitive` abstract operation\n                // https://tc39.es/ecma262/#sec-toprimitive\n                module1.exports = function(input, pref) {\n                    if (!isObject(input) || isSymbol(input)) return input;\n                    var exoticToPrim = input[TO_PRIMITIVE];\n                    var result;\n                    if (exoticToPrim !== undefined) {\n                        if (pref === undefined) pref = \"default\";\n                        result = exoticToPrim.call(input, pref);\n                        if (!isObject(result) || isSymbol(result)) return result;\n                        throw TypeError(\"Can't convert object to primitive value\");\n                    }\n                    if (pref === undefined) pref = \"number\";\n                    return ordinaryToPrimitive(input, pref);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-property-key.js\": /*!***********************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-property-key.js ***!\n  \\***********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_191865__) {\n                var toPrimitive = __nested_webpack_require_191865__(/*! ../internals/to-primitive */ \"./node_modules/core-js/internals/to-primitive.js\");\n                var isSymbol = __nested_webpack_require_191865__(/*! ../internals/is-symbol */ \"./node_modules/core-js/internals/is-symbol.js\");\n                // `ToPropertyKey` abstract operation\n                // https://tc39.es/ecma262/#sec-topropertykey\n                module1.exports = function(argument) {\n                    var key = toPrimitive(argument, \"string\");\n                    return isSymbol(key) ? key : String(key);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-string-tag-support.js\": /*!*****************************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-string-tag-support.js ***!\n  \\*****************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_192836__) {\n                var wellKnownSymbol = __nested_webpack_require_192836__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var TO_STRING_TAG = wellKnownSymbol(\"toStringTag\");\n                var test = {};\n                test[TO_STRING_TAG] = \"z\";\n                module1.exports = String(test) === \"[object z]\";\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/to-string.js\": /*!*****************************************************!*\\\n  !*** ./node_modules/core-js/internals/to-string.js ***!\n  \\*****************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_193534__) {\n                var isSymbol = __nested_webpack_require_193534__(/*! ../internals/is-symbol */ \"./node_modules/core-js/internals/is-symbol.js\");\n                module1.exports = function(argument) {\n                    if (isSymbol(argument)) throw TypeError(\"Cannot convert a Symbol value to a string\");\n                    return String(argument);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/uid.js\": /*!***********************************************!*\\\n  !*** ./node_modules/core-js/internals/uid.js ***!\n  \\***********************************************/ /***/ function(module1) {\n                var id = 0;\n                var postfix = Math.random();\n                module1.exports = function(key) {\n                    return \"Symbol(\" + String(key === undefined ? \"\" : key) + \")_\" + (++id + postfix).toString(36);\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/use-symbol-as-uid.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/internals/use-symbol-as-uid.js ***!\n  \\*************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_194783__) {\n                /* eslint-disable es/no-symbol -- required for testing */ var NATIVE_SYMBOL = __nested_webpack_require_194783__(/*! ../internals/native-symbol */ \"./node_modules/core-js/internals/native-symbol.js\");\n                module1.exports = NATIVE_SYMBOL && !Symbol.sham && typeof Symbol.iterator == \"symbol\";\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/well-known-symbol-wrapped.js\": /*!*********************************************************************!*\\\n  !*** ./node_modules/core-js/internals/well-known-symbol-wrapped.js ***!\n  \\*********************************************************************/ /***/ function(__unused_webpack_module, exports1, __nested_webpack_require_195489__) {\n                var wellKnownSymbol = __nested_webpack_require_195489__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                exports1.f = wellKnownSymbol;\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/well-known-symbol.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/internals/well-known-symbol.js ***!\n  \\*************************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_196058__) {\n                var global1 = __nested_webpack_require_196058__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var shared = __nested_webpack_require_196058__(/*! ../internals/shared */ \"./node_modules/core-js/internals/shared.js\");\n                var has = __nested_webpack_require_196058__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var uid = __nested_webpack_require_196058__(/*! ../internals/uid */ \"./node_modules/core-js/internals/uid.js\");\n                var NATIVE_SYMBOL = __nested_webpack_require_196058__(/*! ../internals/native-symbol */ \"./node_modules/core-js/internals/native-symbol.js\");\n                var USE_SYMBOL_AS_UID = __nested_webpack_require_196058__(/*! ../internals/use-symbol-as-uid */ \"./node_modules/core-js/internals/use-symbol-as-uid.js\");\n                var WellKnownSymbolsStore = shared(\"wks\");\n                var Symbol1 = global1.Symbol;\n                var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol1 : Symbol1 && Symbol1.withoutSetter || uid;\n                module1.exports = function(name) {\n                    if (!has(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == \"string\")) {\n                        if (NATIVE_SYMBOL && has(Symbol1, name)) {\n                            WellKnownSymbolsStore[name] = Symbol1[name];\n                        } else {\n                            WellKnownSymbolsStore[name] = createWellKnownSymbol(\"Symbol.\" + name);\n                        }\n                    }\n                    return WellKnownSymbolsStore[name];\n                };\n            /***/ },\n            /***/ \"./node_modules/core-js/internals/whitespaces.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/internals/whitespaces.js ***!\n  \\*******************************************************/ /***/ function(module1) {\n                // a string of all valid unicode whitespaces\n                module1.exports = \"\t\\n\\v\\f\\r \\xa0    \" + \"          　\\u2028\\u2029\\uFEFF\";\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.array.concat.js\": /*!*********************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.array.concat.js ***!\n  \\*********************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_198448__) {\n                \"use strict\";\n                var $ = __nested_webpack_require_198448__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var fails = __nested_webpack_require_198448__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var isArray = __nested_webpack_require_198448__(/*! ../internals/is-array */ \"./node_modules/core-js/internals/is-array.js\");\n                var isObject = __nested_webpack_require_198448__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var toObject = __nested_webpack_require_198448__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\n                var toLength = __nested_webpack_require_198448__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\n                var createProperty = __nested_webpack_require_198448__(/*! ../internals/create-property */ \"./node_modules/core-js/internals/create-property.js\");\n                var arraySpeciesCreate = __nested_webpack_require_198448__(/*! ../internals/array-species-create */ \"./node_modules/core-js/internals/array-species-create.js\");\n                var arrayMethodHasSpeciesSupport = __nested_webpack_require_198448__(/*! ../internals/array-method-has-species-support */ \"./node_modules/core-js/internals/array-method-has-species-support.js\");\n                var wellKnownSymbol = __nested_webpack_require_198448__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var V8_VERSION = __nested_webpack_require_198448__(/*! ../internals/engine-v8-version */ \"./node_modules/core-js/internals/engine-v8-version.js\");\n                var IS_CONCAT_SPREADABLE = wellKnownSymbol(\"isConcatSpreadable\");\n                var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;\n                var MAXIMUM_ALLOWED_INDEX_EXCEEDED = \"Maximum allowed index exceeded\";\n                // We can't use this feature detection in V8 since it causes\n                // deoptimization and serious performance degradation\n                // https://github.com/zloirock/core-js/issues/679\n                var IS_CONCAT_SPREADABLE_SUPPORT = V8_VERSION >= 51 || !fails(function() {\n                    var array = [];\n                    array[IS_CONCAT_SPREADABLE] = false;\n                    return array.concat()[0] !== array;\n                });\n                var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport(\"concat\");\n                var isConcatSpreadable = function(O) {\n                    if (!isObject(O)) return false;\n                    var spreadable = O[IS_CONCAT_SPREADABLE];\n                    return spreadable !== undefined ? !!spreadable : isArray(O);\n                };\n                var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;\n                // `Array.prototype.concat` method\n                // https://tc39.es/ecma262/#sec-array.prototype.concat\n                // with adding support of @@isConcatSpreadable and @@species\n                $({\n                    target: \"Array\",\n                    proto: true,\n                    forced: FORCED\n                }, {\n                    // eslint-disable-next-line no-unused-vars -- required for `.length`\n                    concat: function concat(arg) {\n                        var O = toObject(this);\n                        var A = arraySpeciesCreate(O, 0);\n                        var n = 0;\n                        var i, k, length, len, E;\n                        for(i = -1, length = arguments.length; i < length; i++){\n                            E = i === -1 ? O : arguments[i];\n                            if (isConcatSpreadable(E)) {\n                                len = toLength(E.length);\n                                if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n                                for(k = 0; k < len; k++, n++)if (k in E) createProperty(A, n, E[k]);\n                            } else {\n                                if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);\n                                createProperty(A, n++, E);\n                            }\n                        }\n                        A.length = n;\n                        return A;\n                    }\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.array.iterator.js\": /*!***********************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.array.iterator.js ***!\n  \\***********************************************************/ /***/ function(module1, __unused_webpack_exports, __nested_webpack_require_203057__) {\n                \"use strict\";\n                var toIndexedObject = __nested_webpack_require_203057__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var addToUnscopables = __nested_webpack_require_203057__(/*! ../internals/add-to-unscopables */ \"./node_modules/core-js/internals/add-to-unscopables.js\");\n                var Iterators = __nested_webpack_require_203057__(/*! ../internals/iterators */ \"./node_modules/core-js/internals/iterators.js\");\n                var InternalStateModule = __nested_webpack_require_203057__(/*! ../internals/internal-state */ \"./node_modules/core-js/internals/internal-state.js\");\n                var defineIterator = __nested_webpack_require_203057__(/*! ../internals/define-iterator */ \"./node_modules/core-js/internals/define-iterator.js\");\n                var ARRAY_ITERATOR = \"Array Iterator\";\n                var setInternalState = InternalStateModule.set;\n                var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);\n                // `Array.prototype.entries` method\n                // https://tc39.es/ecma262/#sec-array.prototype.entries\n                // `Array.prototype.keys` method\n                // https://tc39.es/ecma262/#sec-array.prototype.keys\n                // `Array.prototype.values` method\n                // https://tc39.es/ecma262/#sec-array.prototype.values\n                // `Array.prototype[@@iterator]` method\n                // https://tc39.es/ecma262/#sec-array.prototype-@@iterator\n                // `CreateArrayIterator` internal method\n                // https://tc39.es/ecma262/#sec-createarrayiterator\n                module1.exports = defineIterator(Array, \"Array\", function(iterated, kind) {\n                    setInternalState(this, {\n                        type: ARRAY_ITERATOR,\n                        target: toIndexedObject(iterated),\n                        index: 0,\n                        kind: kind // kind\n                    });\n                // `%ArrayIteratorPrototype%.next` method\n                // https://tc39.es/ecma262/#sec-%arrayiteratorprototype%.next\n                }, function() {\n                    var state = getInternalState(this);\n                    var target = state.target;\n                    var kind = state.kind;\n                    var index = state.index++;\n                    if (!target || index >= target.length) {\n                        state.target = undefined;\n                        return {\n                            value: undefined,\n                            done: true\n                        };\n                    }\n                    if (kind == \"keys\") return {\n                        value: index,\n                        done: false\n                    };\n                    if (kind == \"values\") return {\n                        value: target[index],\n                        done: false\n                    };\n                    return {\n                        value: [\n                            index,\n                            target[index]\n                        ],\n                        done: false\n                    };\n                }, \"values\");\n                // argumentsList[@@iterator] is %ArrayProto_values%\n                // https://tc39.es/ecma262/#sec-createunmappedargumentsobject\n                // https://tc39.es/ecma262/#sec-createmappedargumentsobject\n                Iterators.Arguments = Iterators.Array;\n                // https://tc39.es/ecma262/#sec-array.prototype-@@unscopables\n                addToUnscopables(\"keys\");\n                addToUnscopables(\"values\");\n                addToUnscopables(\"entries\");\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.array.join.js\": /*!*******************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.array.join.js ***!\n  \\*******************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_207042__) {\n                \"use strict\";\n                var $ = __nested_webpack_require_207042__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var IndexedObject = __nested_webpack_require_207042__(/*! ../internals/indexed-object */ \"./node_modules/core-js/internals/indexed-object.js\");\n                var toIndexedObject = __nested_webpack_require_207042__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var arrayMethodIsStrict = __nested_webpack_require_207042__(/*! ../internals/array-method-is-strict */ \"./node_modules/core-js/internals/array-method-is-strict.js\");\n                var nativeJoin = [].join;\n                var ES3_STRINGS = IndexedObject != Object;\n                var STRICT_METHOD = arrayMethodIsStrict(\"join\", \",\");\n                // `Array.prototype.join` method\n                // https://tc39.es/ecma262/#sec-array.prototype.join\n                $({\n                    target: \"Array\",\n                    proto: true,\n                    forced: ES3_STRINGS || !STRICT_METHOD\n                }, {\n                    join: function join(separator) {\n                        return nativeJoin.call(toIndexedObject(this), separator === undefined ? \",\" : separator);\n                    }\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.array.map.js\": /*!******************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.array.map.js ***!\n  \\******************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_208682__) {\n                \"use strict\";\n                var $ = __nested_webpack_require_208682__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var $map = __nested_webpack_require_208682__(/*! ../internals/array-iteration */ \"./node_modules/core-js/internals/array-iteration.js\").map;\n                var arrayMethodHasSpeciesSupport = __nested_webpack_require_208682__(/*! ../internals/array-method-has-species-support */ \"./node_modules/core-js/internals/array-method-has-species-support.js\");\n                var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport(\"map\");\n                // `Array.prototype.map` method\n                // https://tc39.es/ecma262/#sec-array.prototype.map\n                // with adding support of @@species\n                $({\n                    target: \"Array\",\n                    proto: true,\n                    forced: !HAS_SPECIES_SUPPORT\n                }, {\n                    map: function map(callbackfn /* , thisArg */ ) {\n                        return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n                    }\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.array.slice.js\": /*!********************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.array.slice.js ***!\n  \\********************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_210157__) {\n                \"use strict\";\n                var $ = __nested_webpack_require_210157__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var isObject = __nested_webpack_require_210157__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var isArray = __nested_webpack_require_210157__(/*! ../internals/is-array */ \"./node_modules/core-js/internals/is-array.js\");\n                var toAbsoluteIndex = __nested_webpack_require_210157__(/*! ../internals/to-absolute-index */ \"./node_modules/core-js/internals/to-absolute-index.js\");\n                var toLength = __nested_webpack_require_210157__(/*! ../internals/to-length */ \"./node_modules/core-js/internals/to-length.js\");\n                var toIndexedObject = __nested_webpack_require_210157__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var createProperty = __nested_webpack_require_210157__(/*! ../internals/create-property */ \"./node_modules/core-js/internals/create-property.js\");\n                var wellKnownSymbol = __nested_webpack_require_210157__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var arrayMethodHasSpeciesSupport = __nested_webpack_require_210157__(/*! ../internals/array-method-has-species-support */ \"./node_modules/core-js/internals/array-method-has-species-support.js\");\n                var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport(\"slice\");\n                var SPECIES = wellKnownSymbol(\"species\");\n                var nativeSlice = [].slice;\n                var max = Math.max;\n                // `Array.prototype.slice` method\n                // https://tc39.es/ecma262/#sec-array.prototype.slice\n                // fallback for not array-like ES3 strings and DOM objects\n                $({\n                    target: \"Array\",\n                    proto: true,\n                    forced: !HAS_SPECIES_SUPPORT\n                }, {\n                    slice: function slice(start, end) {\n                        var O = toIndexedObject(this);\n                        var length = toLength(O.length);\n                        var k = toAbsoluteIndex(start, length);\n                        var fin = toAbsoluteIndex(end === undefined ? length : end, length);\n                        // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible\n                        var Constructor, result, n;\n                        if (isArray(O)) {\n                            Constructor = O.constructor;\n                            // cross-realm fallback\n                            if (typeof Constructor == \"function\" && (Constructor === Array || isArray(Constructor.prototype))) {\n                                Constructor = undefined;\n                            } else if (isObject(Constructor)) {\n                                Constructor = Constructor[SPECIES];\n                                if (Constructor === null) Constructor = undefined;\n                            }\n                            if (Constructor === Array || Constructor === undefined) {\n                                return nativeSlice.call(O, k, fin);\n                            }\n                        }\n                        result = new (Constructor === undefined ? Array : Constructor)(max(fin - k, 0));\n                        for(n = 0; k < fin; k++, n++)if (k in O) createProperty(result, n, O[k]);\n                        result.length = n;\n                        return result;\n                    }\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.function.name.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.function.name.js ***!\n  \\**********************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_214052__) {\n                var DESCRIPTORS = __nested_webpack_require_214052__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var defineProperty = __nested_webpack_require_214052__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\").f;\n                var FunctionPrototype = Function.prototype;\n                var FunctionPrototypeToString = FunctionPrototype.toString;\n                var nameRE = /^\\s*function ([^ (]*)/;\n                var NAME = \"name\";\n                // Function instances `.name` property\n                // https://tc39.es/ecma262/#sec-function-instances-name\n                if (DESCRIPTORS && !(NAME in FunctionPrototype)) {\n                    defineProperty(FunctionPrototype, NAME, {\n                        configurable: true,\n                        get: function() {\n                            try {\n                                return FunctionPrototypeToString.call(this).match(nameRE)[1];\n                            } catch (error) {\n                                return \"\";\n                            }\n                        }\n                    });\n                }\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.number.constructor.js\": /*!***************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.number.constructor.js ***!\n  \\***************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_215630__) {\n                \"use strict\";\n                var DESCRIPTORS = __nested_webpack_require_215630__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var global1 = __nested_webpack_require_215630__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var isForced = __nested_webpack_require_215630__(/*! ../internals/is-forced */ \"./node_modules/core-js/internals/is-forced.js\");\n                var redefine = __nested_webpack_require_215630__(/*! ../internals/redefine */ \"./node_modules/core-js/internals/redefine.js\");\n                var has = __nested_webpack_require_215630__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var classof = __nested_webpack_require_215630__(/*! ../internals/classof-raw */ \"./node_modules/core-js/internals/classof-raw.js\");\n                var inheritIfRequired = __nested_webpack_require_215630__(/*! ../internals/inherit-if-required */ \"./node_modules/core-js/internals/inherit-if-required.js\");\n                var isSymbol = __nested_webpack_require_215630__(/*! ../internals/is-symbol */ \"./node_modules/core-js/internals/is-symbol.js\");\n                var toPrimitive = __nested_webpack_require_215630__(/*! ../internals/to-primitive */ \"./node_modules/core-js/internals/to-primitive.js\");\n                var fails = __nested_webpack_require_215630__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var create = __nested_webpack_require_215630__(/*! ../internals/object-create */ \"./node_modules/core-js/internals/object-create.js\");\n                var getOwnPropertyNames = __nested_webpack_require_215630__(/*! ../internals/object-get-own-property-names */ \"./node_modules/core-js/internals/object-get-own-property-names.js\").f;\n                var getOwnPropertyDescriptor = __nested_webpack_require_215630__(/*! ../internals/object-get-own-property-descriptor */ \"./node_modules/core-js/internals/object-get-own-property-descriptor.js\").f;\n                var defineProperty = __nested_webpack_require_215630__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\").f;\n                var trim = __nested_webpack_require_215630__(/*! ../internals/string-trim */ \"./node_modules/core-js/internals/string-trim.js\").trim;\n                var NUMBER = \"Number\";\n                var NativeNumber = global1[NUMBER];\n                var NumberPrototype = NativeNumber.prototype;\n                // Opera ~12 has broken Object#toString\n                var BROKEN_CLASSOF = classof(create(NumberPrototype)) == NUMBER;\n                // `ToNumber` abstract operation\n                // https://tc39.es/ecma262/#sec-tonumber\n                var toNumber = function(argument) {\n                    if (isSymbol(argument)) throw TypeError(\"Cannot convert a Symbol value to a number\");\n                    var it = toPrimitive(argument, \"number\");\n                    var first, third, radix, maxCode, digits, length, index, code;\n                    if (typeof it == \"string\" && it.length > 2) {\n                        it = trim(it);\n                        first = it.charCodeAt(0);\n                        if (first === 43 || first === 45) {\n                            third = it.charCodeAt(2);\n                            if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n                        } else if (first === 48) {\n                            switch(it.charCodeAt(1)){\n                                case 66:\n                                case 98:\n                                    radix = 2;\n                                    maxCode = 49;\n                                    break; // fast equal of /^0b[01]+$/i\n                                case 79:\n                                case 111:\n                                    radix = 8;\n                                    maxCode = 55;\n                                    break; // fast equal of /^0o[0-7]+$/i\n                                default:\n                                    return +it;\n                            }\n                            digits = it.slice(2);\n                            length = digits.length;\n                            for(index = 0; index < length; index++){\n                                code = digits.charCodeAt(index);\n                                // parseInt parses a string to a first unavailable symbol\n                                // but ToNumber should return NaN if a string contains unavailable symbols\n                                if (code < 48 || code > maxCode) return NaN;\n                            }\n                            return parseInt(digits, radix);\n                        }\n                    }\n                    return +it;\n                };\n                // `Number` constructor\n                // https://tc39.es/ecma262/#sec-number-constructor\n                if (isForced(NUMBER, !NativeNumber(\" 0o1\") || !NativeNumber(\"0b1\") || NativeNumber(\"+0x1\"))) {\n                    var NumberWrapper = function Number1(value) {\n                        var it = arguments.length < 1 ? 0 : value;\n                        var dummy = this;\n                        return dummy instanceof NumberWrapper && (BROKEN_CLASSOF ? fails(function() {\n                            NumberPrototype.valueOf.call(dummy);\n                        }) : classof(dummy) != NUMBER) ? inheritIfRequired(new NativeNumber(toNumber(it)), dummy, NumberWrapper) : toNumber(it);\n                    };\n                    for(var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : // ES3:\n                    (\"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,\" + // ES2015 (in case, if modules with ES2015 Number statics required before):\n                    \"EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,\" + \"MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger,\" + // ESNext\n                    \"fromString,range\").split(\",\"), j = 0, key; keys.length > j; j++){\n                        if (has(NativeNumber, key = keys[j]) && !has(NumberWrapper, key)) {\n                            defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n                        }\n                    }\n                    NumberWrapper.prototype = NumberPrototype;\n                    NumberPrototype.constructor = NumberWrapper;\n                    redefine(global1, NUMBER, NumberWrapper);\n                }\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.object.assign.js\": /*!**********************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.object.assign.js ***!\n  \\**********************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_222369__) {\n                var $ = __nested_webpack_require_222369__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var assign = __nested_webpack_require_222369__(/*! ../internals/object-assign */ \"./node_modules/core-js/internals/object-assign.js\");\n                // `Object.assign` method\n                // https://tc39.es/ecma262/#sec-object.assign\n                // eslint-disable-next-line es/no-object-assign -- required for testing\n                $({\n                    target: \"Object\",\n                    stat: true,\n                    forced: Object.assign !== assign\n                }, {\n                    assign: assign\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.object.keys.js\": /*!********************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.object.keys.js ***!\n  \\********************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_223400__) {\n                var $ = __nested_webpack_require_223400__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var toObject = __nested_webpack_require_223400__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\n                var nativeKeys = __nested_webpack_require_223400__(/*! ../internals/object-keys */ \"./node_modules/core-js/internals/object-keys.js\");\n                var fails = __nested_webpack_require_223400__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var FAILS_ON_PRIMITIVES = fails(function() {\n                    nativeKeys(1);\n                });\n                // `Object.keys` method\n                // https://tc39.es/ecma262/#sec-object.keys\n                $({\n                    target: \"Object\",\n                    stat: true,\n                    forced: FAILS_ON_PRIMITIVES\n                }, {\n                    keys: function keys(it) {\n                        return nativeKeys(toObject(it));\n                    }\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.object.to-string.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.object.to-string.js ***!\n  \\*************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_224811__) {\n                var TO_STRING_TAG_SUPPORT = __nested_webpack_require_224811__(/*! ../internals/to-string-tag-support */ \"./node_modules/core-js/internals/to-string-tag-support.js\");\n                var redefine = __nested_webpack_require_224811__(/*! ../internals/redefine */ \"./node_modules/core-js/internals/redefine.js\");\n                var toString = __nested_webpack_require_224811__(/*! ../internals/object-to-string */ \"./node_modules/core-js/internals/object-to-string.js\");\n                // `Object.prototype.toString` method\n                // https://tc39.es/ecma262/#sec-object.prototype.tostring\n                if (!TO_STRING_TAG_SUPPORT) {\n                    redefine(Object.prototype, \"toString\", toString, {\n                        unsafe: true\n                    });\n                }\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.regexp.to-string.js\": /*!*************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.regexp.to-string.js ***!\n  \\*************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_225962__) {\n                \"use strict\";\n                var redefine = __nested_webpack_require_225962__(/*! ../internals/redefine */ \"./node_modules/core-js/internals/redefine.js\");\n                var anObject = __nested_webpack_require_225962__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                var $toString = __nested_webpack_require_225962__(/*! ../internals/to-string */ \"./node_modules/core-js/internals/to-string.js\");\n                var fails = __nested_webpack_require_225962__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var flags = __nested_webpack_require_225962__(/*! ../internals/regexp-flags */ \"./node_modules/core-js/internals/regexp-flags.js\");\n                var TO_STRING = \"toString\";\n                var RegExpPrototype = RegExp.prototype;\n                var nativeToString = RegExpPrototype[TO_STRING];\n                var NOT_GENERIC = fails(function() {\n                    return nativeToString.call({\n                        source: \"a\",\n                        flags: \"b\"\n                    }) != \"/a/b\";\n                });\n                // FF44- RegExp#toString has a wrong name\n                var INCORRECT_NAME = nativeToString.name != TO_STRING;\n                // `RegExp.prototype.toString` method\n                // https://tc39.es/ecma262/#sec-regexp.prototype.tostring\n                if (NOT_GENERIC || INCORRECT_NAME) {\n                    redefine(RegExp.prototype, TO_STRING, function toString() {\n                        var R = anObject(this);\n                        var p = $toString(R.source);\n                        var rf = R.flags;\n                        var f = $toString(rf === undefined && R instanceof RegExp && !(\"flags\" in RegExpPrototype) ? flags.call(R) : rf);\n                        return \"/\" + p + \"/\" + f;\n                    }, {\n                        unsafe: true\n                    });\n                }\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.string.iterator.js\": /*!************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.string.iterator.js ***!\n  \\************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_228237__) {\n                \"use strict\";\n                var charAt = __nested_webpack_require_228237__(/*! ../internals/string-multibyte */ \"./node_modules/core-js/internals/string-multibyte.js\").charAt;\n                var toString = __nested_webpack_require_228237__(/*! ../internals/to-string */ \"./node_modules/core-js/internals/to-string.js\");\n                var InternalStateModule = __nested_webpack_require_228237__(/*! ../internals/internal-state */ \"./node_modules/core-js/internals/internal-state.js\");\n                var defineIterator = __nested_webpack_require_228237__(/*! ../internals/define-iterator */ \"./node_modules/core-js/internals/define-iterator.js\");\n                var STRING_ITERATOR = \"String Iterator\";\n                var setInternalState = InternalStateModule.set;\n                var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);\n                // `String.prototype[@@iterator]` method\n                // https://tc39.es/ecma262/#sec-string.prototype-@@iterator\n                defineIterator(String, \"String\", function(iterated) {\n                    setInternalState(this, {\n                        type: STRING_ITERATOR,\n                        string: toString(iterated),\n                        index: 0\n                    });\n                // `%StringIteratorPrototype%.next` method\n                // https://tc39.es/ecma262/#sec-%stringiteratorprototype%.next\n                }, function next() {\n                    var state = getInternalState(this);\n                    var string = state.string;\n                    var index = state.index;\n                    var point;\n                    if (index >= string.length) return {\n                        value: undefined,\n                        done: true\n                    };\n                    point = charAt(string, index);\n                    state.index += point.length;\n                    return {\n                        value: point,\n                        done: false\n                    };\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.string.link.js\": /*!********************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.string.link.js ***!\n  \\********************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_230583__) {\n                \"use strict\";\n                var $ = __nested_webpack_require_230583__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var createHTML = __nested_webpack_require_230583__(/*! ../internals/create-html */ \"./node_modules/core-js/internals/create-html.js\");\n                var forcedStringHTMLMethod = __nested_webpack_require_230583__(/*! ../internals/string-html-forced */ \"./node_modules/core-js/internals/string-html-forced.js\");\n                // `String.prototype.link` method\n                // https://tc39.es/ecma262/#sec-string.prototype.link\n                $({\n                    target: \"String\",\n                    proto: true,\n                    forced: forcedStringHTMLMethod(\"link\")\n                }, {\n                    link: function link(url) {\n                        return createHTML(this, \"a\", \"href\", url);\n                    }\n                });\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.symbol.description.js\": /*!***************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.symbol.description.js ***!\n  \\***************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_231871__) {\n                \"use strict\";\n                // `Symbol.prototype.description` getter\n                // https://tc39.es/ecma262/#sec-symbol.prototype.description\n                var $ = __nested_webpack_require_231871__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var DESCRIPTORS = __nested_webpack_require_231871__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var global1 = __nested_webpack_require_231871__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var has = __nested_webpack_require_231871__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var isObject = __nested_webpack_require_231871__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var defineProperty = __nested_webpack_require_231871__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\").f;\n                var copyConstructorProperties = __nested_webpack_require_231871__(/*! ../internals/copy-constructor-properties */ \"./node_modules/core-js/internals/copy-constructor-properties.js\");\n                var NativeSymbol = global1.Symbol;\n                if (DESCRIPTORS && typeof NativeSymbol == \"function\" && (!(\"description\" in NativeSymbol.prototype) || // Safari 12 bug\n                NativeSymbol().description !== undefined)) {\n                    var EmptyStringDescriptionStore = {};\n                    // wrap Symbol constructor for correct work with undefined description\n                    var SymbolWrapper = function Symbol1() {\n                        var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);\n                        var result = this instanceof SymbolWrapper ? new NativeSymbol(description) : description === undefined ? NativeSymbol() : NativeSymbol(description);\n                        if (description === \"\") EmptyStringDescriptionStore[result] = true;\n                        return result;\n                    };\n                    copyConstructorProperties(SymbolWrapper, NativeSymbol);\n                    var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;\n                    symbolPrototype.constructor = SymbolWrapper;\n                    var symbolToString = symbolPrototype.toString;\n                    var native = String(NativeSymbol(\"test\")) == \"Symbol(test)\";\n                    var regexp = /^Symbol\\((.*)\\)[^)]+$/;\n                    defineProperty(symbolPrototype, \"description\", {\n                        configurable: true,\n                        get: function description() {\n                            var symbol = isObject(this) ? this.valueOf() : this;\n                            var string = symbolToString.call(symbol);\n                            if (has(EmptyStringDescriptionStore, symbol)) return \"\";\n                            var desc = native ? string.slice(7, -1) : string.replace(regexp, \"$1\");\n                            return desc === \"\" ? undefined : desc;\n                        }\n                    });\n                    $({\n                        global: true,\n                        forced: true\n                    }, {\n                        Symbol: SymbolWrapper\n                    });\n                }\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.symbol.iterator.js\": /*!************************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.symbol.iterator.js ***!\n  \\************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_235575__) {\n                var defineWellKnownSymbol = __nested_webpack_require_235575__(/*! ../internals/define-well-known-symbol */ \"./node_modules/core-js/internals/define-well-known-symbol.js\");\n                // `Symbol.iterator` well-known symbol\n                // https://tc39.es/ecma262/#sec-symbol.iterator\n                defineWellKnownSymbol(\"iterator\");\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/es.symbol.js\": /*!***************************************************!*\\\n  !*** ./node_modules/core-js/modules/es.symbol.js ***!\n  \\***************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_236264__) {\n                \"use strict\";\n                var $ = __nested_webpack_require_236264__(/*! ../internals/export */ \"./node_modules/core-js/internals/export.js\");\n                var global1 = __nested_webpack_require_236264__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var getBuiltIn = __nested_webpack_require_236264__(/*! ../internals/get-built-in */ \"./node_modules/core-js/internals/get-built-in.js\");\n                var IS_PURE = __nested_webpack_require_236264__(/*! ../internals/is-pure */ \"./node_modules/core-js/internals/is-pure.js\");\n                var DESCRIPTORS = __nested_webpack_require_236264__(/*! ../internals/descriptors */ \"./node_modules/core-js/internals/descriptors.js\");\n                var NATIVE_SYMBOL = __nested_webpack_require_236264__(/*! ../internals/native-symbol */ \"./node_modules/core-js/internals/native-symbol.js\");\n                var fails = __nested_webpack_require_236264__(/*! ../internals/fails */ \"./node_modules/core-js/internals/fails.js\");\n                var has = __nested_webpack_require_236264__(/*! ../internals/has */ \"./node_modules/core-js/internals/has.js\");\n                var isArray = __nested_webpack_require_236264__(/*! ../internals/is-array */ \"./node_modules/core-js/internals/is-array.js\");\n                var isObject = __nested_webpack_require_236264__(/*! ../internals/is-object */ \"./node_modules/core-js/internals/is-object.js\");\n                var isSymbol = __nested_webpack_require_236264__(/*! ../internals/is-symbol */ \"./node_modules/core-js/internals/is-symbol.js\");\n                var anObject = __nested_webpack_require_236264__(/*! ../internals/an-object */ \"./node_modules/core-js/internals/an-object.js\");\n                var toObject = __nested_webpack_require_236264__(/*! ../internals/to-object */ \"./node_modules/core-js/internals/to-object.js\");\n                var toIndexedObject = __nested_webpack_require_236264__(/*! ../internals/to-indexed-object */ \"./node_modules/core-js/internals/to-indexed-object.js\");\n                var toPropertyKey = __nested_webpack_require_236264__(/*! ../internals/to-property-key */ \"./node_modules/core-js/internals/to-property-key.js\");\n                var $toString = __nested_webpack_require_236264__(/*! ../internals/to-string */ \"./node_modules/core-js/internals/to-string.js\");\n                var createPropertyDescriptor = __nested_webpack_require_236264__(/*! ../internals/create-property-descriptor */ \"./node_modules/core-js/internals/create-property-descriptor.js\");\n                var nativeObjectCreate = __nested_webpack_require_236264__(/*! ../internals/object-create */ \"./node_modules/core-js/internals/object-create.js\");\n                var objectKeys = __nested_webpack_require_236264__(/*! ../internals/object-keys */ \"./node_modules/core-js/internals/object-keys.js\");\n                var getOwnPropertyNamesModule = __nested_webpack_require_236264__(/*! ../internals/object-get-own-property-names */ \"./node_modules/core-js/internals/object-get-own-property-names.js\");\n                var getOwnPropertyNamesExternal = __nested_webpack_require_236264__(/*! ../internals/object-get-own-property-names-external */ \"./node_modules/core-js/internals/object-get-own-property-names-external.js\");\n                var getOwnPropertySymbolsModule = __nested_webpack_require_236264__(/*! ../internals/object-get-own-property-symbols */ \"./node_modules/core-js/internals/object-get-own-property-symbols.js\");\n                var getOwnPropertyDescriptorModule = __nested_webpack_require_236264__(/*! ../internals/object-get-own-property-descriptor */ \"./node_modules/core-js/internals/object-get-own-property-descriptor.js\");\n                var definePropertyModule = __nested_webpack_require_236264__(/*! ../internals/object-define-property */ \"./node_modules/core-js/internals/object-define-property.js\");\n                var propertyIsEnumerableModule = __nested_webpack_require_236264__(/*! ../internals/object-property-is-enumerable */ \"./node_modules/core-js/internals/object-property-is-enumerable.js\");\n                var createNonEnumerableProperty = __nested_webpack_require_236264__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                var redefine = __nested_webpack_require_236264__(/*! ../internals/redefine */ \"./node_modules/core-js/internals/redefine.js\");\n                var shared = __nested_webpack_require_236264__(/*! ../internals/shared */ \"./node_modules/core-js/internals/shared.js\");\n                var sharedKey = __nested_webpack_require_236264__(/*! ../internals/shared-key */ \"./node_modules/core-js/internals/shared-key.js\");\n                var hiddenKeys = __nested_webpack_require_236264__(/*! ../internals/hidden-keys */ \"./node_modules/core-js/internals/hidden-keys.js\");\n                var uid = __nested_webpack_require_236264__(/*! ../internals/uid */ \"./node_modules/core-js/internals/uid.js\");\n                var wellKnownSymbol = __nested_webpack_require_236264__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var wrappedWellKnownSymbolModule = __nested_webpack_require_236264__(/*! ../internals/well-known-symbol-wrapped */ \"./node_modules/core-js/internals/well-known-symbol-wrapped.js\");\n                var defineWellKnownSymbol = __nested_webpack_require_236264__(/*! ../internals/define-well-known-symbol */ \"./node_modules/core-js/internals/define-well-known-symbol.js\");\n                var setToStringTag = __nested_webpack_require_236264__(/*! ../internals/set-to-string-tag */ \"./node_modules/core-js/internals/set-to-string-tag.js\");\n                var InternalStateModule = __nested_webpack_require_236264__(/*! ../internals/internal-state */ \"./node_modules/core-js/internals/internal-state.js\");\n                var $forEach = __nested_webpack_require_236264__(/*! ../internals/array-iteration */ \"./node_modules/core-js/internals/array-iteration.js\").forEach;\n                var HIDDEN = sharedKey(\"hidden\");\n                var SYMBOL = \"Symbol\";\n                var PROTOTYPE = \"prototype\";\n                var TO_PRIMITIVE = wellKnownSymbol(\"toPrimitive\");\n                var setInternalState = InternalStateModule.set;\n                var getInternalState = InternalStateModule.getterFor(SYMBOL);\n                var ObjectPrototype = Object[PROTOTYPE];\n                var $Symbol = global1.Symbol;\n                var $stringify = getBuiltIn(\"JSON\", \"stringify\");\n                var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;\n                var nativeDefineProperty = definePropertyModule.f;\n                var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;\n                var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;\n                var AllSymbols = shared(\"symbols\");\n                var ObjectPrototypeSymbols = shared(\"op-symbols\");\n                var StringToSymbolRegistry = shared(\"string-to-symbol-registry\");\n                var SymbolToStringRegistry = shared(\"symbol-to-string-registry\");\n                var WellKnownSymbolsStore = shared(\"wks\");\n                var QObject = global1.QObject;\n                // Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\n                var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n                // fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\n                var setSymbolDescriptor = DESCRIPTORS && fails(function() {\n                    return nativeObjectCreate(nativeDefineProperty({}, \"a\", {\n                        get: function() {\n                            return nativeDefineProperty(this, \"a\", {\n                                value: 7\n                            }).a;\n                        }\n                    })).a != 7;\n                }) ? function(O, P, Attributes) {\n                    var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, P);\n                    if (ObjectPrototypeDescriptor) delete ObjectPrototype[P];\n                    nativeDefineProperty(O, P, Attributes);\n                    if (ObjectPrototypeDescriptor && O !== ObjectPrototype) {\n                        nativeDefineProperty(ObjectPrototype, P, ObjectPrototypeDescriptor);\n                    }\n                } : nativeDefineProperty;\n                var wrap = function(tag, description) {\n                    var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);\n                    setInternalState(symbol, {\n                        type: SYMBOL,\n                        tag: tag,\n                        description: description\n                    });\n                    if (!DESCRIPTORS) symbol.description = description;\n                    return symbol;\n                };\n                var $defineProperty = function defineProperty(O, P, Attributes) {\n                    if (O === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, P, Attributes);\n                    anObject(O);\n                    var key = toPropertyKey(P);\n                    anObject(Attributes);\n                    if (has(AllSymbols, key)) {\n                        if (!Attributes.enumerable) {\n                            if (!has(O, HIDDEN)) nativeDefineProperty(O, HIDDEN, createPropertyDescriptor(1, {}));\n                            O[HIDDEN][key] = true;\n                        } else {\n                            if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;\n                            Attributes = nativeObjectCreate(Attributes, {\n                                enumerable: createPropertyDescriptor(0, false)\n                            });\n                        }\n                        return setSymbolDescriptor(O, key, Attributes);\n                    }\n                    return nativeDefineProperty(O, key, Attributes);\n                };\n                var $defineProperties = function defineProperties(O, Properties) {\n                    anObject(O);\n                    var properties = toIndexedObject(Properties);\n                    var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));\n                    $forEach(keys, function(key) {\n                        if (!DESCRIPTORS || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);\n                    });\n                    return O;\n                };\n                var $create = function create(O, Properties) {\n                    return Properties === undefined ? nativeObjectCreate(O) : $defineProperties(nativeObjectCreate(O), Properties);\n                };\n                var $propertyIsEnumerable = function propertyIsEnumerable(V) {\n                    var P = toPropertyKey(V);\n                    var enumerable = nativePropertyIsEnumerable.call(this, P);\n                    if (this === ObjectPrototype && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;\n                    return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;\n                };\n                var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {\n                    var it = toIndexedObject(O);\n                    var key = toPropertyKey(P);\n                    if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;\n                    var descriptor = nativeGetOwnPropertyDescriptor(it, key);\n                    if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {\n                        descriptor.enumerable = true;\n                    }\n                    return descriptor;\n                };\n                var $getOwnPropertyNames = function getOwnPropertyNames(O) {\n                    var names = nativeGetOwnPropertyNames(toIndexedObject(O));\n                    var result = [];\n                    $forEach(names, function(key) {\n                        if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);\n                    });\n                    return result;\n                };\n                var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {\n                    var IS_OBJECT_PROTOTYPE = O === ObjectPrototype;\n                    var names = nativeGetOwnPropertyNames(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));\n                    var result = [];\n                    $forEach(names, function(key) {\n                        if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype, key))) {\n                            result.push(AllSymbols[key]);\n                        }\n                    });\n                    return result;\n                };\n                // `Symbol` constructor\n                // https://tc39.es/ecma262/#sec-symbol-constructor\n                if (!NATIVE_SYMBOL) {\n                    $Symbol = function Symbol1() {\n                        if (this instanceof $Symbol) throw TypeError(\"Symbol is not a constructor\");\n                        var description = !arguments.length || arguments[0] === undefined ? undefined : $toString(arguments[0]);\n                        var tag = uid(description);\n                        var setter = function(value) {\n                            if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);\n                            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n                            setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));\n                        };\n                        if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, {\n                            configurable: true,\n                            set: setter\n                        });\n                        return wrap(tag, description);\n                    };\n                    redefine($Symbol[PROTOTYPE], \"toString\", function toString() {\n                        return getInternalState(this).tag;\n                    });\n                    redefine($Symbol, \"withoutSetter\", function(description) {\n                        return wrap(uid(description), description);\n                    });\n                    propertyIsEnumerableModule.f = $propertyIsEnumerable;\n                    definePropertyModule.f = $defineProperty;\n                    getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;\n                    getOwnPropertyNamesModule.f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;\n                    getOwnPropertySymbolsModule.f = $getOwnPropertySymbols;\n                    wrappedWellKnownSymbolModule.f = function(name) {\n                        return wrap(wellKnownSymbol(name), name);\n                    };\n                    if (DESCRIPTORS) {\n                        // https://github.com/tc39/proposal-Symbol-description\n                        nativeDefineProperty($Symbol[PROTOTYPE], \"description\", {\n                            configurable: true,\n                            get: function description() {\n                                return getInternalState(this).description;\n                            }\n                        });\n                        if (!IS_PURE) {\n                            redefine(ObjectPrototype, \"propertyIsEnumerable\", $propertyIsEnumerable, {\n                                unsafe: true\n                            });\n                        }\n                    }\n                }\n                $({\n                    global: true,\n                    wrap: true,\n                    forced: !NATIVE_SYMBOL,\n                    sham: !NATIVE_SYMBOL\n                }, {\n                    Symbol: $Symbol\n                });\n                $forEach(objectKeys(WellKnownSymbolsStore), function(name) {\n                    defineWellKnownSymbol(name);\n                });\n                $({\n                    target: SYMBOL,\n                    stat: true,\n                    forced: !NATIVE_SYMBOL\n                }, {\n                    // `Symbol.for` method\n                    // https://tc39.es/ecma262/#sec-symbol.for\n                    \"for\": function(key) {\n                        var string = $toString(key);\n                        if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];\n                        var symbol = $Symbol(string);\n                        StringToSymbolRegistry[string] = symbol;\n                        SymbolToStringRegistry[symbol] = string;\n                        return symbol;\n                    },\n                    // `Symbol.keyFor` method\n                    // https://tc39.es/ecma262/#sec-symbol.keyfor\n                    keyFor: function keyFor(sym) {\n                        if (!isSymbol(sym)) throw TypeError(sym + \" is not a symbol\");\n                        if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];\n                    },\n                    useSetter: function() {\n                        USE_SETTER = true;\n                    },\n                    useSimple: function() {\n                        USE_SETTER = false;\n                    }\n                });\n                $({\n                    target: \"Object\",\n                    stat: true,\n                    forced: !NATIVE_SYMBOL,\n                    sham: !DESCRIPTORS\n                }, {\n                    // `Object.create` method\n                    // https://tc39.es/ecma262/#sec-object.create\n                    create: $create,\n                    // `Object.defineProperty` method\n                    // https://tc39.es/ecma262/#sec-object.defineproperty\n                    defineProperty: $defineProperty,\n                    // `Object.defineProperties` method\n                    // https://tc39.es/ecma262/#sec-object.defineproperties\n                    defineProperties: $defineProperties,\n                    // `Object.getOwnPropertyDescriptor` method\n                    // https://tc39.es/ecma262/#sec-object.getownpropertydescriptors\n                    getOwnPropertyDescriptor: $getOwnPropertyDescriptor\n                });\n                $({\n                    target: \"Object\",\n                    stat: true,\n                    forced: !NATIVE_SYMBOL\n                }, {\n                    // `Object.getOwnPropertyNames` method\n                    // https://tc39.es/ecma262/#sec-object.getownpropertynames\n                    getOwnPropertyNames: $getOwnPropertyNames,\n                    // `Object.getOwnPropertySymbols` method\n                    // https://tc39.es/ecma262/#sec-object.getownpropertysymbols\n                    getOwnPropertySymbols: $getOwnPropertySymbols\n                });\n                // Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n                // https://bugs.chromium.org/p/v8/issues/detail?id=3443\n                $({\n                    target: \"Object\",\n                    stat: true,\n                    forced: fails(function() {\n                        getOwnPropertySymbolsModule.f(1);\n                    })\n                }, {\n                    getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n                        return getOwnPropertySymbolsModule.f(toObject(it));\n                    }\n                });\n                // `JSON.stringify` method behavior with symbols\n                // https://tc39.es/ecma262/#sec-json.stringify\n                if ($stringify) {\n                    var FORCED_JSON_STRINGIFY = !NATIVE_SYMBOL || fails(function() {\n                        var symbol = $Symbol();\n                        // MS Edge converts symbol values to JSON as {}\n                        return $stringify([\n                            symbol\n                        ]) != \"[null]\" || $stringify({\n                            a: symbol\n                        }) != \"{}\" || $stringify(Object(symbol)) != \"{}\";\n                    });\n                    $({\n                        target: \"JSON\",\n                        stat: true,\n                        forced: FORCED_JSON_STRINGIFY\n                    }, {\n                        // eslint-disable-next-line no-unused-vars -- required for `.length`\n                        stringify: function stringify(it, replacer, space) {\n                            var args = [\n                                it\n                            ];\n                            var index = 1;\n                            var $replacer;\n                            while(arguments.length > index)args.push(arguments[index++]);\n                            $replacer = replacer;\n                            if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n                            if (!isArray(replacer)) replacer = function(key, value) {\n                                if (typeof $replacer == \"function\") value = $replacer.call(this, key, value);\n                                if (!isSymbol(value)) return value;\n                            };\n                            args[1] = replacer;\n                            return $stringify.apply(null, args);\n                        }\n                    });\n                }\n                // `Symbol.prototype[@@toPrimitive]` method\n                // https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive\n                if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) {\n                    createNonEnumerableProperty($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n                }\n                // `Symbol.prototype[@@toStringTag]` property\n                // https://tc39.es/ecma262/#sec-symbol.prototype-@@tostringtag\n                setToStringTag($Symbol, SYMBOL);\n                hiddenKeys[HIDDEN] = true;\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/web.dom-collections.for-each.js\": /*!**********************************************************************!*\\\n  !*** ./node_modules/core-js/modules/web.dom-collections.for-each.js ***!\n  \\**********************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_258228__) {\n                var global1 = __nested_webpack_require_258228__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var DOMIterables = __nested_webpack_require_258228__(/*! ../internals/dom-iterables */ \"./node_modules/core-js/internals/dom-iterables.js\");\n                var forEach = __nested_webpack_require_258228__(/*! ../internals/array-for-each */ \"./node_modules/core-js/internals/array-for-each.js\");\n                var createNonEnumerableProperty = __nested_webpack_require_258228__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                for(var COLLECTION_NAME in DOMIterables){\n                    var Collection = global1[COLLECTION_NAME];\n                    var CollectionPrototype = Collection && Collection.prototype;\n                    // some Chrome versions have non-configurable methods on DOMTokenList\n                    if (CollectionPrototype && CollectionPrototype.forEach !== forEach) try {\n                        createNonEnumerableProperty(CollectionPrototype, \"forEach\", forEach);\n                    } catch (error) {\n                        CollectionPrototype.forEach = forEach;\n                    }\n                }\n            /***/ },\n            /***/ \"./node_modules/core-js/modules/web.dom-collections.iterator.js\": /*!**********************************************************************!*\\\n  !*** ./node_modules/core-js/modules/web.dom-collections.iterator.js ***!\n  \\**********************************************************************/ /***/ function(__unused_webpack_module, __unused_webpack_exports, __nested_webpack_require_259870__) {\n                var global1 = __nested_webpack_require_259870__(/*! ../internals/global */ \"./node_modules/core-js/internals/global.js\");\n                var DOMIterables = __nested_webpack_require_259870__(/*! ../internals/dom-iterables */ \"./node_modules/core-js/internals/dom-iterables.js\");\n                var ArrayIteratorMethods = __nested_webpack_require_259870__(/*! ../modules/es.array.iterator */ \"./node_modules/core-js/modules/es.array.iterator.js\");\n                var createNonEnumerableProperty = __nested_webpack_require_259870__(/*! ../internals/create-non-enumerable-property */ \"./node_modules/core-js/internals/create-non-enumerable-property.js\");\n                var wellKnownSymbol = __nested_webpack_require_259870__(/*! ../internals/well-known-symbol */ \"./node_modules/core-js/internals/well-known-symbol.js\");\n                var ITERATOR = wellKnownSymbol(\"iterator\");\n                var TO_STRING_TAG = wellKnownSymbol(\"toStringTag\");\n                var ArrayValues = ArrayIteratorMethods.values;\n                for(var COLLECTION_NAME in DOMIterables){\n                    var Collection = global1[COLLECTION_NAME];\n                    var CollectionPrototype = Collection && Collection.prototype;\n                    if (CollectionPrototype) {\n                        // some Chrome versions have non-configurable methods on DOMTokenList\n                        if (CollectionPrototype[ITERATOR] !== ArrayValues) try {\n                            createNonEnumerableProperty(CollectionPrototype, ITERATOR, ArrayValues);\n                        } catch (error) {\n                            CollectionPrototype[ITERATOR] = ArrayValues;\n                        }\n                        if (!CollectionPrototype[TO_STRING_TAG]) {\n                            createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);\n                        }\n                        if (DOMIterables[COLLECTION_NAME]) for(var METHOD_NAME in ArrayIteratorMethods){\n                            // some Chrome versions have non-configurable methods on DOMTokenList\n                            if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {\n                                createNonEnumerableProperty(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);\n                            } catch (error) {\n                                CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];\n                            }\n                        }\n                    }\n                }\n            /***/ },\n            /***/ \"./node_modules/es6-promise/dist/es6-promise.js\": /*!******************************************************!*\\\n  !*** ./node_modules/es6-promise/dist/es6-promise.js ***!\n  \\******************************************************/ /***/ function(module1) {\n                /*!\n * @overview es6-promise - a tiny implementation of Promises/A+.\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license\n *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE\n * @version   v4.2.8+1e68dce6\n */ (function(global1, factory) {\n                     true ? module1.exports = factory() : 0;\n                })(this, function() {\n                    \"use strict\";\n                    function objectOrFunction(x) {\n                        var type = typeof x;\n                        return x !== null && (type === \"object\" || type === \"function\");\n                    }\n                    function isFunction(x) {\n                        return typeof x === \"function\";\n                    }\n                    var _isArray = void 0;\n                    if (Array.isArray) {\n                        _isArray = Array.isArray;\n                    } else {\n                        _isArray = function(x) {\n                            return Object.prototype.toString.call(x) === \"[object Array]\";\n                        };\n                    }\n                    var isArray = _isArray;\n                    var len = 0;\n                    var vertxNext = void 0;\n                    var customSchedulerFn = void 0;\n                    var asap = function asap(callback, arg) {\n                        queue[len] = callback;\n                        queue[len + 1] = arg;\n                        len += 2;\n                        if (len === 2) {\n                            // If len is 2, that means that we need to schedule an async flush.\n                            // If additional callbacks are queued before the queue is flushed, they\n                            // will be processed by this flush that we are scheduling.\n                            if (customSchedulerFn) {\n                                customSchedulerFn(flush);\n                            } else {\n                                scheduleFlush();\n                            }\n                        }\n                    };\n                    function setScheduler(scheduleFn) {\n                        customSchedulerFn = scheduleFn;\n                    }\n                    function setAsap(asapFn) {\n                        asap = asapFn;\n                    }\n                    var browserWindow =  false ? 0 : undefined;\n                    var browserGlobal = browserWindow || {};\n                    var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;\n                    var isNode = typeof self === \"undefined\" && typeof process !== \"undefined\" && ({}).toString.call(process) === \"[object process]\";\n                    // test for web worker but not in IE10\n                    var isWorker = typeof Uint8ClampedArray !== \"undefined\" && typeof importScripts !== \"undefined\" && typeof MessageChannel !== \"undefined\";\n                    // node\n                    function useNextTick() {\n                        // node version 0.10.x displays a deprecation warning when nextTick is used recursively\n                        // see https://github.com/cujojs/when/issues/410 for details\n                        return function() {\n                            return process.nextTick(flush);\n                        };\n                    }\n                    // vertx\n                    function useVertxTimer() {\n                        if (typeof vertxNext !== \"undefined\") {\n                            return function() {\n                                vertxNext(flush);\n                            };\n                        }\n                        return useSetTimeout();\n                    }\n                    function useMutationObserver() {\n                        var iterations = 0;\n                        var observer = new BrowserMutationObserver(flush);\n                        var node = document.createTextNode(\"\");\n                        observer.observe(node, {\n                            characterData: true\n                        });\n                        return function() {\n                            node.data = iterations = ++iterations % 2;\n                        };\n                    }\n                    // web worker\n                    function useMessageChannel() {\n                        var channel = new MessageChannel();\n                        channel.port1.onmessage = flush;\n                        return function() {\n                            return channel.port2.postMessage(0);\n                        };\n                    }\n                    function useSetTimeout() {\n                        // Store setTimeout reference so es6-promise will be unaffected by\n                        // other code modifying setTimeout (like sinon.useFakeTimers())\n                        var globalSetTimeout = setTimeout;\n                        return function() {\n                            return globalSetTimeout(flush, 1);\n                        };\n                    }\n                    var queue = new Array(1000);\n                    function flush() {\n                        for(var i = 0; i < len; i += 2){\n                            var callback = queue[i];\n                            var arg = queue[i + 1];\n                            callback(arg);\n                            queue[i] = undefined;\n                            queue[i + 1] = undefined;\n                        }\n                        len = 0;\n                    }\n                    function attemptVertx() {\n                        try {\n                            var vertx = Function(\"return this\")().require(\"vertx\");\n                            vertxNext = vertx.runOnLoop || vertx.runOnContext;\n                            return useVertxTimer();\n                        } catch (e) {\n                            return useSetTimeout();\n                        }\n                    }\n                    var scheduleFlush = void 0;\n                    // Decide what async method to use to triggering processing of queued callbacks:\n                    if (isNode) {\n                        scheduleFlush = useNextTick();\n                    } else if (BrowserMutationObserver) {\n                        scheduleFlush = useMutationObserver();\n                    } else if (isWorker) {\n                        scheduleFlush = useMessageChannel();\n                    } else if (browserWindow === undefined && \"function\" === \"function\") {\n                        scheduleFlush = attemptVertx();\n                    } else {\n                        scheduleFlush = useSetTimeout();\n                    }\n                    function then(onFulfillment, onRejection) {\n                        var parent = this;\n                        var child = new this.constructor(noop);\n                        if (child[PROMISE_ID] === undefined) {\n                            makePromise(child);\n                        }\n                        var _state = parent._state;\n                        if (_state) {\n                            var callback = arguments[_state - 1];\n                            asap(function() {\n                                return invokeCallback(_state, child, callback, parent._result);\n                            });\n                        } else {\n                            subscribe(parent, child, onFulfillment, onRejection);\n                        }\n                        return child;\n                    }\n                    /**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/ function resolve$1(object) {\n                        /*jshint validthis:true */ var Constructor = this;\n                        if (object && typeof object === \"object\" && object.constructor === Constructor) {\n                            return object;\n                        }\n                        var promise = new Constructor(noop);\n                        resolve(promise, object);\n                        return promise;\n                    }\n                    var PROMISE_ID = Math.random().toString(36).substring(2);\n                    function noop() {}\n                    var PENDING = void 0;\n                    var FULFILLED = 1;\n                    var REJECTED = 2;\n                    function selfFulfillment() {\n                        return new TypeError(\"You cannot resolve a promise with itself\");\n                    }\n                    function cannotReturnOwn() {\n                        return new TypeError(\"A promises callback cannot return that same promise.\");\n                    }\n                    function tryThen(then$$1, value, fulfillmentHandler, rejectionHandler) {\n                        try {\n                            then$$1.call(value, fulfillmentHandler, rejectionHandler);\n                        } catch (e) {\n                            return e;\n                        }\n                    }\n                    function handleForeignThenable(promise, thenable, then$$1) {\n                        asap(function(promise) {\n                            var sealed = false;\n                            var error = tryThen(then$$1, thenable, function(value) {\n                                if (sealed) {\n                                    return;\n                                }\n                                sealed = true;\n                                if (thenable !== value) {\n                                    resolve(promise, value);\n                                } else {\n                                    fulfill(promise, value);\n                                }\n                            }, function(reason) {\n                                if (sealed) {\n                                    return;\n                                }\n                                sealed = true;\n                                reject(promise, reason);\n                            }, \"Settle: \" + (promise._label || \" unknown promise\"));\n                            if (!sealed && error) {\n                                sealed = true;\n                                reject(promise, error);\n                            }\n                        }, promise);\n                    }\n                    function handleOwnThenable(promise, thenable) {\n                        if (thenable._state === FULFILLED) {\n                            fulfill(promise, thenable._result);\n                        } else if (thenable._state === REJECTED) {\n                            reject(promise, thenable._result);\n                        } else {\n                            subscribe(thenable, undefined, function(value) {\n                                return resolve(promise, value);\n                            }, function(reason) {\n                                return reject(promise, reason);\n                            });\n                        }\n                    }\n                    function handleMaybeThenable(promise, maybeThenable, then$$1) {\n                        if (maybeThenable.constructor === promise.constructor && then$$1 === then && maybeThenable.constructor.resolve === resolve$1) {\n                            handleOwnThenable(promise, maybeThenable);\n                        } else {\n                            if (then$$1 === undefined) {\n                                fulfill(promise, maybeThenable);\n                            } else if (isFunction(then$$1)) {\n                                handleForeignThenable(promise, maybeThenable, then$$1);\n                            } else {\n                                fulfill(promise, maybeThenable);\n                            }\n                        }\n                    }\n                    function resolve(promise, value) {\n                        if (promise === value) {\n                            reject(promise, selfFulfillment());\n                        } else if (objectOrFunction(value)) {\n                            var then$$1 = void 0;\n                            try {\n                                then$$1 = value.then;\n                            } catch (error) {\n                                reject(promise, error);\n                                return;\n                            }\n                            handleMaybeThenable(promise, value, then$$1);\n                        } else {\n                            fulfill(promise, value);\n                        }\n                    }\n                    function publishRejection(promise) {\n                        if (promise._onerror) {\n                            promise._onerror(promise._result);\n                        }\n                        publish(promise);\n                    }\n                    function fulfill(promise, value) {\n                        if (promise._state !== PENDING) {\n                            return;\n                        }\n                        promise._result = value;\n                        promise._state = FULFILLED;\n                        if (promise._subscribers.length !== 0) {\n                            asap(publish, promise);\n                        }\n                    }\n                    function reject(promise, reason) {\n                        if (promise._state !== PENDING) {\n                            return;\n                        }\n                        promise._state = REJECTED;\n                        promise._result = reason;\n                        asap(publishRejection, promise);\n                    }\n                    function subscribe(parent, child, onFulfillment, onRejection) {\n                        var _subscribers = parent._subscribers;\n                        var length = _subscribers.length;\n                        parent._onerror = null;\n                        _subscribers[length] = child;\n                        _subscribers[length + FULFILLED] = onFulfillment;\n                        _subscribers[length + REJECTED] = onRejection;\n                        if (length === 0 && parent._state) {\n                            asap(publish, parent);\n                        }\n                    }\n                    function publish(promise) {\n                        var subscribers = promise._subscribers;\n                        var settled = promise._state;\n                        if (subscribers.length === 0) {\n                            return;\n                        }\n                        var child = void 0, callback = void 0, detail = promise._result;\n                        for(var i = 0; i < subscribers.length; i += 3){\n                            child = subscribers[i];\n                            callback = subscribers[i + settled];\n                            if (child) {\n                                invokeCallback(settled, child, callback, detail);\n                            } else {\n                                callback(detail);\n                            }\n                        }\n                        promise._subscribers.length = 0;\n                    }\n                    function invokeCallback(settled, promise, callback, detail) {\n                        var hasCallback = isFunction(callback), value = void 0, error = void 0, succeeded = true;\n                        if (hasCallback) {\n                            try {\n                                value = callback(detail);\n                            } catch (e) {\n                                succeeded = false;\n                                error = e;\n                            }\n                            if (promise === value) {\n                                reject(promise, cannotReturnOwn());\n                                return;\n                            }\n                        } else {\n                            value = detail;\n                        }\n                        if (promise._state !== PENDING) {\n                        // noop\n                        } else if (hasCallback && succeeded) {\n                            resolve(promise, value);\n                        } else if (succeeded === false) {\n                            reject(promise, error);\n                        } else if (settled === FULFILLED) {\n                            fulfill(promise, value);\n                        } else if (settled === REJECTED) {\n                            reject(promise, value);\n                        }\n                    }\n                    function initializePromise(promise, resolver) {\n                        try {\n                            resolver(function resolvePromise(value) {\n                                resolve(promise, value);\n                            }, function rejectPromise(reason) {\n                                reject(promise, reason);\n                            });\n                        } catch (e) {\n                            reject(promise, e);\n                        }\n                    }\n                    var id = 0;\n                    function nextId() {\n                        return id++;\n                    }\n                    function makePromise(promise) {\n                        promise[PROMISE_ID] = id++;\n                        promise._state = undefined;\n                        promise._result = undefined;\n                        promise._subscribers = [];\n                    }\n                    function validationError() {\n                        return new Error(\"Array Methods must be provided an Array\");\n                    }\n                    var Enumerator = function() {\n                        function Enumerator(Constructor, input) {\n                            this._instanceConstructor = Constructor;\n                            this.promise = new Constructor(noop);\n                            if (!this.promise[PROMISE_ID]) {\n                                makePromise(this.promise);\n                            }\n                            if (isArray(input)) {\n                                this.length = input.length;\n                                this._remaining = input.length;\n                                this._result = new Array(this.length);\n                                if (this.length === 0) {\n                                    fulfill(this.promise, this._result);\n                                } else {\n                                    this.length = this.length || 0;\n                                    this._enumerate(input);\n                                    if (this._remaining === 0) {\n                                        fulfill(this.promise, this._result);\n                                    }\n                                }\n                            } else {\n                                reject(this.promise, validationError());\n                            }\n                        }\n                        Enumerator.prototype._enumerate = function _enumerate(input) {\n                            for(var i = 0; this._state === PENDING && i < input.length; i++){\n                                this._eachEntry(input[i], i);\n                            }\n                        };\n                        Enumerator.prototype._eachEntry = function _eachEntry(entry, i) {\n                            var c = this._instanceConstructor;\n                            var resolve$$1 = c.resolve;\n                            if (resolve$$1 === resolve$1) {\n                                var _then = void 0;\n                                var error = void 0;\n                                var didError = false;\n                                try {\n                                    _then = entry.then;\n                                } catch (e) {\n                                    didError = true;\n                                    error = e;\n                                }\n                                if (_then === then && entry._state !== PENDING) {\n                                    this._settledAt(entry._state, i, entry._result);\n                                } else if (typeof _then !== \"function\") {\n                                    this._remaining--;\n                                    this._result[i] = entry;\n                                } else if (c === Promise$1) {\n                                    var promise = new c(noop);\n                                    if (didError) {\n                                        reject(promise, error);\n                                    } else {\n                                        handleMaybeThenable(promise, entry, _then);\n                                    }\n                                    this._willSettleAt(promise, i);\n                                } else {\n                                    this._willSettleAt(new c(function(resolve$$1) {\n                                        return resolve$$1(entry);\n                                    }), i);\n                                }\n                            } else {\n                                this._willSettleAt(resolve$$1(entry), i);\n                            }\n                        };\n                        Enumerator.prototype._settledAt = function _settledAt(state, i, value) {\n                            var promise = this.promise;\n                            if (promise._state === PENDING) {\n                                this._remaining--;\n                                if (state === REJECTED) {\n                                    reject(promise, value);\n                                } else {\n                                    this._result[i] = value;\n                                }\n                            }\n                            if (this._remaining === 0) {\n                                fulfill(promise, this._result);\n                            }\n                        };\n                        Enumerator.prototype._willSettleAt = function _willSettleAt(promise, i) {\n                            var enumerator = this;\n                            subscribe(promise, undefined, function(value) {\n                                return enumerator._settledAt(FULFILLED, i, value);\n                            }, function(reason) {\n                                return enumerator._settledAt(REJECTED, i, reason);\n                            });\n                        };\n                        return Enumerator;\n                    }();\n                    /**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/ function all(entries) {\n                        return new Enumerator(this, entries).promise;\n                    }\n                    /**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/ function race(entries) {\n                        /*jshint validthis:true */ var Constructor = this;\n                        if (!isArray(entries)) {\n                            return new Constructor(function(_, reject) {\n                                return reject(new TypeError(\"You must pass an array to race.\"));\n                            });\n                        } else {\n                            return new Constructor(function(resolve, reject) {\n                                var length = entries.length;\n                                for(var i = 0; i < length; i++){\n                                    Constructor.resolve(entries[i]).then(resolve, reject);\n                                }\n                            });\n                        }\n                    }\n                    /**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/ function reject$1(reason) {\n                        /*jshint validthis:true */ var Constructor = this;\n                        var promise = new Constructor(noop);\n                        reject(promise, reason);\n                        return promise;\n                    }\n                    function needsResolver() {\n                        throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\");\n                    }\n                    function needsNew() {\n                        throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n                    }\n                    /**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/ var Promise$1 = function() {\n                        function Promise(resolver) {\n                            this[PROMISE_ID] = nextId();\n                            this._result = this._state = undefined;\n                            this._subscribers = [];\n                            if (noop !== resolver) {\n                                typeof resolver !== \"function\" && needsResolver();\n                                this instanceof Promise ? initializePromise(this, resolver) : needsNew();\n                            }\n                        }\n                        /**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */ /**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */ Promise.prototype.catch = function _catch(onRejection) {\n                            return this.then(null, onRejection);\n                        };\n                        /**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */ Promise.prototype.finally = function _finally(callback) {\n                            var promise = this;\n                            var constructor = promise.constructor;\n                            if (isFunction(callback)) {\n                                return promise.then(function(value) {\n                                    return constructor.resolve(callback()).then(function() {\n                                        return value;\n                                    });\n                                }, function(reason) {\n                                    return constructor.resolve(callback()).then(function() {\n                                        throw reason;\n                                    });\n                                });\n                            }\n                            return promise.then(callback, callback);\n                        };\n                        return Promise;\n                    }();\n                    Promise$1.prototype.then = then;\n                    Promise$1.all = all;\n                    Promise$1.race = race;\n                    Promise$1.resolve = resolve$1;\n                    Promise$1.reject = reject$1;\n                    Promise$1._setScheduler = setScheduler;\n                    Promise$1._setAsap = setAsap;\n                    Promise$1._asap = asap;\n                    /*global self*/ function polyfill() {\n                        var local = void 0;\n                        if (typeof global !== \"undefined\") {\n                            local = global;\n                        } else if (typeof self !== \"undefined\") {\n                            local = self;\n                        } else {\n                            try {\n                                local = Function(\"return this\")();\n                            } catch (e) {\n                                throw new Error(\"polyfill failed because global object is unavailable in this environment\");\n                            }\n                        }\n                        var P = local.Promise;\n                        if (P) {\n                            var promiseToString = null;\n                            try {\n                                promiseToString = Object.prototype.toString.call(P.resolve());\n                            } catch (e) {\n                            // silently ignored\n                            }\n                            if (promiseToString === \"[object Promise]\" && !P.cast) {\n                                return;\n                            }\n                        }\n                        local.Promise = Promise$1;\n                    }\n                    // Strange compat..\n                    Promise$1.polyfill = polyfill;\n                    Promise$1.Promise = Promise$1;\n                    return Promise$1;\n                });\n            //# sourceMappingURL=es6-promise.map\n            /***/ },\n            /***/ \"html2canvas\": /*!******************************!*\\\n  !*** external \"html2canvas\" ***!\n  \\******************************/ /***/ function(module1) {\n                \"use strict\";\n                module1.exports = __WEBPACK_EXTERNAL_MODULE_html2canvas__;\n            /***/ },\n            /***/ \"jspdf\": /*!************************!*\\\n  !*** external \"jspdf\" ***!\n  \\************************/ /***/ function(module1) {\n                \"use strict\";\n                module1.exports = __WEBPACK_EXTERNAL_MODULE_jspdf__;\n            /***/ }\n        };\n        /************************************************************************/ /******/ // The module cache\n        /******/ var __webpack_module_cache__ = {};\n        /******/ /******/ // The require function\n        /******/ function __nested_webpack_require_304581__(moduleId) {\n            /******/ // Check if module is in cache\n            /******/ var cachedModule = __webpack_module_cache__[moduleId];\n            /******/ if (cachedModule !== undefined) {\n                /******/ return cachedModule.exports;\n            /******/ }\n            /******/ // Create a new module (and put it into the cache)\n            /******/ var module1 = __webpack_module_cache__[moduleId] = {\n                /******/ // no module.id needed\n                /******/ // no module.loaded needed\n                /******/ exports: {}\n            };\n            /******/ /******/ // Execute the module function\n            /******/ __webpack_modules__[moduleId].call(module1.exports, module1, module1.exports, __nested_webpack_require_304581__);\n            /******/ /******/ // Return the exports of the module\n            /******/ return module1.exports;\n        /******/ }\n        /******/ /************************************************************************/ /******/ /* webpack/runtime/compat get default export */ /******/ !function() {\n            /******/ // getDefaultExport function for compatibility with non-harmony modules\n            /******/ __nested_webpack_require_304581__.n = function(module1) {\n                /******/ var getter = module1 && module1.__esModule ? /******/ function() {\n                    return module1[\"default\"];\n                } : /******/ function() {\n                    return module1;\n                };\n                /******/ __nested_webpack_require_304581__.d(getter, {\n                    a: getter\n                });\n                /******/ return getter;\n            /******/ };\n        /******/ }();\n        /******/ /******/ /* webpack/runtime/define property getters */ /******/ !function() {\n            /******/ // define getter functions for harmony exports\n            /******/ __nested_webpack_require_304581__.d = function(exports1, definition) {\n                /******/ for(var key in definition){\n                    /******/ if (__nested_webpack_require_304581__.o(definition, key) && !__nested_webpack_require_304581__.o(exports1, key)) {\n                        /******/ Object.defineProperty(exports1, key, {\n                            enumerable: true,\n                            get: definition[key]\n                        });\n                    /******/ }\n                /******/ }\n            /******/ };\n        /******/ }();\n        /******/ /******/ /* webpack/runtime/hasOwnProperty shorthand */ /******/ !function() {\n            /******/ __nested_webpack_require_304581__.o = function(obj, prop) {\n                return Object.prototype.hasOwnProperty.call(obj, prop);\n            };\n        /******/ }();\n        /******/ /******/ /* webpack/runtime/make namespace object */ /******/ !function() {\n            /******/ // define __esModule on exports\n            /******/ __nested_webpack_require_304581__.r = function(exports1) {\n                /******/ if (typeof Symbol !== \"undefined\" && Symbol.toStringTag) {\n                    /******/ Object.defineProperty(exports1, Symbol.toStringTag, {\n                        value: \"Module\"\n                    });\n                /******/ }\n                /******/ Object.defineProperty(exports1, \"__esModule\", {\n                    value: true\n                });\n            /******/ };\n        /******/ }();\n        /******/ /************************************************************************/ var __nested_webpack_exports__ = {};\n        // This entry need to be wrapped in an IIFE because it need to be in strict mode.\n        !function() {\n            \"use strict\";\n            /*!**********************!*\\\n  !*** ./src/index.js ***!\n  \\**********************/ __nested_webpack_require_304581__.r(__nested_webpack_exports__);\n            /* harmony import */ var _worker_js__WEBPACK_IMPORTED_MODULE_0__ = __nested_webpack_require_304581__(/*! ./worker.js */ \"./src/worker.js\");\n            /* harmony import */ var _plugin_jspdf_plugin_js__WEBPACK_IMPORTED_MODULE_1__ = __nested_webpack_require_304581__(/*! ./plugin/jspdf-plugin.js */ \"./src/plugin/jspdf-plugin.js\");\n            /* harmony import */ var _plugin_pagebreaks_js__WEBPACK_IMPORTED_MODULE_2__ = __nested_webpack_require_304581__(/*! ./plugin/pagebreaks.js */ \"./src/plugin/pagebreaks.js\");\n            /* harmony import */ var _plugin_hyperlinks_js__WEBPACK_IMPORTED_MODULE_3__ = __nested_webpack_require_304581__(/*! ./plugin/hyperlinks.js */ \"./src/plugin/hyperlinks.js\");\n            /**\n * Generate a PDF from an HTML element or string using html2canvas and jsPDF.\n *\n * @param {Element|string} source The source element or HTML string.\n * @param {Object=} opt An object of optional settings: 'margin', 'filename',\n *    'image' ('type' and 'quality'), and 'html2canvas' / 'jspdf', which are\n *    sent as settings to their corresponding functions.\n */ var html2pdf = function html2pdf(src, opt) {\n                // Create a new worker with the given options.\n                var worker = new html2pdf.Worker(opt);\n                if (src) {\n                    // If src is specified, perform the traditional 'simple' operation.\n                    return worker.from(src).save();\n                } else {\n                    // Otherwise, return the worker for new Promise-based operation.\n                    return worker;\n                }\n            };\n            html2pdf.Worker = _worker_js__WEBPACK_IMPORTED_MODULE_0__.default; // Expose the html2pdf function.\n            /* harmony default export */ __nested_webpack_exports__[\"default\"] = html2pdf;\n        }();\n        __nested_webpack_exports__ = __nested_webpack_exports__.default;\n        /******/ return __nested_webpack_exports__;\n    /******/ }();\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/html2pdf.js/dist/html2pdf.js\n");

/***/ })

};
;